using System;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using System.Linq;
using UpdateControls;
using clojure.lang;

namespace Strive.Client.Model
{
    public class PersistentTreeMapModel<TKeyType, TValueType> : IEnumerable<TValueType>
    {
        private readonly PersistentTreeMap _entities = new PersistentTreeMap();

        public PersistentTreeMapModel(){}

        public PersistentTreeMapModel(IEnumerable<KeyValuePair<TKeyType, TValueType>> keyValuePairs)
        {
            Contract.Requires<ArgumentNullException>(keyValuePairs != null);

            foreach (var e in keyValuePairs)
                _entities[e.Key] = e.Value;
        }

        #region Independent properties
        // Generated by Update Controls --------------------------------
        private readonly Independent _indEntities = new Independent();

        public void Set(TKeyType id, TValueType entity)
        {
            _indEntities.OnSet();
            _entities[id] = entity;
        }

        public void Remove(TKeyType id)
        {
            _indEntities.OnSet();
            _entities.Remove(id);
        }

        public TValueType GetEntity(TKeyType id)
        {
            _indEntities.OnGet();
            return (TValueType)_entities[id];
        }

        public IEnumerable<TValueType> Entities
        {
            get { _indEntities.OnGet(); return (IEnumerable<TValueType>)_entities.Values; }
        }

        public int Count
        {
            get { _indEntities.OnGet(); return _entities.Count; }
        }

        public void Clear()
        {
            _indEntities.OnSet();
            _entities.Clear();
        }

        public bool ContainsKey(TKeyType key)
        {
            _indEntities.OnGet();
            return _entities.Contains(key);
        }

        public TValueType Last()
        {
            _indEntities.OnGet();
            return (TValueType)_entities.rseq().first();
        }

        // End generated code --------------------------------
        #endregion

        #region IEnumerable<TValueType> Members

        public IEnumerator<TValueType> GetEnumerator()
        {
            return _entities.Values.Cast<TValueType>().GetEnumerator();
        }

        #endregion

        #region IEnumerable Members

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _entities.Values.GetEnumerator();
        }

        #endregion
    }
}

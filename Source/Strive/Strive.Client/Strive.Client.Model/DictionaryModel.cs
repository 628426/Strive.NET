using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using UpdateControls;


namespace Strive.Client.Model
{
    public class DictionaryModel<keyType, valueType>
    {
        public Dictionary<keyType, valueType> _entities;

        public DictionaryModel()
        {
            _entities = new Dictionary<keyType, valueType>();
        }

        public DictionaryModel(IEnumerable<KeyValuePair<keyType, valueType>> dictionary)
        {
            _entities = new Dictionary<keyType, valueType>();
            foreach (KeyValuePair<keyType, valueType> e in dictionary)
            {
                _entities.Add(e.Key, e.Value);
            }
        }

        #region Independent properties
        // Generated by Update Controls --------------------------------
        private Independent _indEntities = new Independent();

        public void AddEntity(keyType id, valueType entity)
        {
            _indEntities.OnSet();
            _entities[id] = entity;
        }

        public void DeleteEntity(keyType id)
        {
            _indEntities.OnSet();
            _entities.Remove(id);
        }

        public valueType GetEntity(keyType id)
        {
            _indEntities.OnGet();
            return _entities[id];
        }

        public IEnumerable<valueType> Entities
        {
            get { _indEntities.OnGet(); return _entities.Values; }
        }

        public int Count
        {
            get { _indEntities.OnGet(); return _entities.Count; }
        }

        public void Clear()
        {
            _indEntities.OnSet();
            _entities.Clear();
        }

        public bool ContainsKey(keyType key)
        {
            _indEntities.OnGet();
            return _entities.ContainsKey(key);
        }

        public bool ContainsValue(valueType value)
        {
            _indEntities.OnGet();
            return _entities.ContainsValue(value);
        }

        // End generated code --------------------------------
        #endregion
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using UpdateControls;
using Strive.Network.Client;
using ToClient = Strive.Network.Messages.ToClient;


namespace Strive.Client.Model
{
    public class WorldModel
    {
        private List<EntityModel> _entities;
        private int _test;
        private ServerConnection _connection;

        public WorldModel(ServerConnection connection)
        {
            _entities = new List<EntityModel>();
            _connection = connection;
            _connection.OnPositionSent += new ServerConnection.OnPositionSentHandler(UpdatePositions);
        }

        void UpdatePositions(ToClient.Position message)
        {
            EntityModel entity = _entities.Where(e => e.Name == message.instance_id.ToString()).FirstOrDefault();
            if (entity != null)
            {
                entity.Position = message.position;
                entity.Rotation = message.rotation;
            }
        }

        #region Independent properties
        // Generated by Update Controls --------------------------------
        private Independent _indTest = new Independent();
        private Independent _indEntities = new Independent();

        public void AddEntity(EntityModel entity)
        {
            _indEntities.OnSet();
            _entities.Add(entity);
        }

        public void DeleteEntity(EntityModel entity)
        {
            _indEntities.OnSet();
            _entities.Remove(entity);
        }

        public IEnumerable<EntityModel> Entities
        {
            get { _indEntities.OnGet(); return _entities; }
        }

        public int Test
        {
            get { _indTest.OnGet(); return _test; }
            set { _indTest.OnSet(); _test = value; }
        }
        // End generated code --------------------------------
        #endregion
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UpdateControls;

namespace Strive.WPF.Model
{
    public class UnitModel
    {
        float _x;
        float _y;
        float _z;
        int _task;
        int _progress;
        int _behavior;
        List<int> _waypoints;
        List<int> _inventory;

        #region Independent properties
        // Generated by Update Controls --------------------------------
        private Independent _indX = new Independent();
        private Independent _indY = new Independent();
        private Independent _indZ = new Independent();
        private Independent _indTask = new Independent();
        private Independent _indProgress = new Independent();
        private Independent _indBehavior = new Independent();
        private Independent _indWaypoints = new Independent();
        private Independent _indInventory = new Independent();

        public float X
        {
            get { _indX.OnGet(); return _x; }
            set { _indX.OnSet(); _x = value; }
        }

        public float Y
        {
            get { _indY.OnGet(); return _y; }
            set { _indY.OnSet(); _y = value; }
        }

        public float Z
        {
            get { _indZ.OnGet(); return _z; }
            set { _indZ.OnSet(); _z = value; }
        }

        public int Task
        {
            get { _indTask.OnGet(); return _task; }
            set { _indTask.OnSet(); _task = value; }
        }

        public int Progress
        {
            get { _indProgress.OnGet(); return _progress; }
            set { _indProgress.OnSet(); _progress = value; }
        }

        public int Behavior
        {
            get { _indBehavior.OnGet(); return _behavior; }
            set { _indBehavior.OnSet(); _behavior = value; }
        }

        public int NewWaypoint()
        {
            _indWaypoints.OnSet();
            int waypoint = new int();
            _waypoints.Add(waypoint);
            return waypoint;
        }

        public void DeleteWaypoint(int waypoint)
        {
            _indWaypoints.OnSet();
            _waypoints.Remove(waypoint);
        }

        public IEnumerable<int> Waypoints
        {
            get { _indWaypoints.OnGet(); return _waypoints; }
        }

        public int NewInventory()
        {
            _indInventory.OnSet();
            int inventory = new int();
            _inventory.Add(inventory);
            return inventory;
        }

        public void DeleteInventory(int inventory)
        {
            _indInventory.OnSet();
            _inventory.Remove(inventory);
        }

        public IEnumerable<int> Inventory
        {
            get { _indInventory.OnGet(); return _inventory; }
        }
        // End generated code --------------------------------
        #endregion
    }
}

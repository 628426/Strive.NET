//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.288
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Strive.Data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class Multiverse : DataSet {
        
        private PlayerDataTable tablePlayer;
        
        private WorldDataTable tableWorld;
        
        private AreaDataTable tableArea;
        
        private MobileDataTable tableMobile;
        
        private QuaffableDataTable tableQuaffable;
        
        private JunkDataTable tableJunk;
        
        private TerrainDataTable tableTerrain;
        
        private WieldableDataTable tableWieldable;
        
        private MobilePossesableByPlayerDataTable tableMobilePossesableByPlayer;
        
        private InventoryDataTable tableInventory;
        
        private DataRelation relationWorldArea;
        
        private DataRelation relationAreaTerrain;
        
        private DataRelation relationAreaWieldable;
        
        private DataRelation relationPlayerMobilePossesableByPlayer;
        
        private DataRelation relationAreaMobile;
        
        private DataRelation relationMobileMobilePossesableByPlayer;
        
        private DataRelation relationMobileInventory;
        
        private DataRelation relationAreaQuaffable;
        
        private DataRelation relationAreaJunk;
        
        private DataRelation relationWieldableInventory;
        
        public Multiverse() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected Multiverse(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Player"] != null)) {
                    this.Tables.Add(new PlayerDataTable(ds.Tables["Player"]));
                }
                if ((ds.Tables["World"] != null)) {
                    this.Tables.Add(new WorldDataTable(ds.Tables["World"]));
                }
                if ((ds.Tables["Area"] != null)) {
                    this.Tables.Add(new AreaDataTable(ds.Tables["Area"]));
                }
                if ((ds.Tables["Mobile"] != null)) {
                    this.Tables.Add(new MobileDataTable(ds.Tables["Mobile"]));
                }
                if ((ds.Tables["Quaffable"] != null)) {
                    this.Tables.Add(new QuaffableDataTable(ds.Tables["Quaffable"]));
                }
                if ((ds.Tables["Junk"] != null)) {
                    this.Tables.Add(new JunkDataTable(ds.Tables["Junk"]));
                }
                if ((ds.Tables["Terrain"] != null)) {
                    this.Tables.Add(new TerrainDataTable(ds.Tables["Terrain"]));
                }
                if ((ds.Tables["Wieldable"] != null)) {
                    this.Tables.Add(new WieldableDataTable(ds.Tables["Wieldable"]));
                }
                if ((ds.Tables["MobilePossesableByPlayer"] != null)) {
                    this.Tables.Add(new MobilePossesableByPlayerDataTable(ds.Tables["MobilePossesableByPlayer"]));
                }
                if ((ds.Tables["Inventory"] != null)) {
                    this.Tables.Add(new InventoryDataTable(ds.Tables["Inventory"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PlayerDataTable Player {
            get {
                return this.tablePlayer;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WorldDataTable World {
            get {
                return this.tableWorld;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AreaDataTable Area {
            get {
                return this.tableArea;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MobileDataTable Mobile {
            get {
                return this.tableMobile;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public QuaffableDataTable Quaffable {
            get {
                return this.tableQuaffable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public JunkDataTable Junk {
            get {
                return this.tableJunk;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TerrainDataTable Terrain {
            get {
                return this.tableTerrain;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WieldableDataTable Wieldable {
            get {
                return this.tableWieldable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MobilePossesableByPlayerDataTable MobilePossesableByPlayer {
            get {
                return this.tableMobilePossesableByPlayer;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InventoryDataTable Inventory {
            get {
                return this.tableInventory;
            }
        }
        
        public override DataSet Clone() {
            Multiverse cln = ((Multiverse)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Player"] != null)) {
                this.Tables.Add(new PlayerDataTable(ds.Tables["Player"]));
            }
            if ((ds.Tables["World"] != null)) {
                this.Tables.Add(new WorldDataTable(ds.Tables["World"]));
            }
            if ((ds.Tables["Area"] != null)) {
                this.Tables.Add(new AreaDataTable(ds.Tables["Area"]));
            }
            if ((ds.Tables["Mobile"] != null)) {
                this.Tables.Add(new MobileDataTable(ds.Tables["Mobile"]));
            }
            if ((ds.Tables["Quaffable"] != null)) {
                this.Tables.Add(new QuaffableDataTable(ds.Tables["Quaffable"]));
            }
            if ((ds.Tables["Junk"] != null)) {
                this.Tables.Add(new JunkDataTable(ds.Tables["Junk"]));
            }
            if ((ds.Tables["Terrain"] != null)) {
                this.Tables.Add(new TerrainDataTable(ds.Tables["Terrain"]));
            }
            if ((ds.Tables["Wieldable"] != null)) {
                this.Tables.Add(new WieldableDataTable(ds.Tables["Wieldable"]));
            }
            if ((ds.Tables["MobilePossesableByPlayer"] != null)) {
                this.Tables.Add(new MobilePossesableByPlayerDataTable(ds.Tables["MobilePossesableByPlayer"]));
            }
            if ((ds.Tables["Inventory"] != null)) {
                this.Tables.Add(new InventoryDataTable(ds.Tables["Inventory"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablePlayer = ((PlayerDataTable)(this.Tables["Player"]));
            if ((this.tablePlayer != null)) {
                this.tablePlayer.InitVars();
            }
            this.tableWorld = ((WorldDataTable)(this.Tables["World"]));
            if ((this.tableWorld != null)) {
                this.tableWorld.InitVars();
            }
            this.tableArea = ((AreaDataTable)(this.Tables["Area"]));
            if ((this.tableArea != null)) {
                this.tableArea.InitVars();
            }
            this.tableMobile = ((MobileDataTable)(this.Tables["Mobile"]));
            if ((this.tableMobile != null)) {
                this.tableMobile.InitVars();
            }
            this.tableQuaffable = ((QuaffableDataTable)(this.Tables["Quaffable"]));
            if ((this.tableQuaffable != null)) {
                this.tableQuaffable.InitVars();
            }
            this.tableJunk = ((JunkDataTable)(this.Tables["Junk"]));
            if ((this.tableJunk != null)) {
                this.tableJunk.InitVars();
            }
            this.tableTerrain = ((TerrainDataTable)(this.Tables["Terrain"]));
            if ((this.tableTerrain != null)) {
                this.tableTerrain.InitVars();
            }
            this.tableWieldable = ((WieldableDataTable)(this.Tables["Wieldable"]));
            if ((this.tableWieldable != null)) {
                this.tableWieldable.InitVars();
            }
            this.tableMobilePossesableByPlayer = ((MobilePossesableByPlayerDataTable)(this.Tables["MobilePossesableByPlayer"]));
            if ((this.tableMobilePossesableByPlayer != null)) {
                this.tableMobilePossesableByPlayer.InitVars();
            }
            this.tableInventory = ((InventoryDataTable)(this.Tables["Inventory"]));
            if ((this.tableInventory != null)) {
                this.tableInventory.InitVars();
            }
            this.relationWorldArea = this.Relations["WorldArea"];
            this.relationAreaTerrain = this.Relations["AreaTerrain"];
            this.relationAreaWieldable = this.Relations["AreaWieldable"];
            this.relationPlayerMobilePossesableByPlayer = this.Relations["PlayerMobilePossesableByPlayer"];
            this.relationAreaMobile = this.Relations["AreaMobile"];
            this.relationMobileMobilePossesableByPlayer = this.Relations["MobileMobilePossesableByPlayer"];
            this.relationMobileInventory = this.Relations["MobileInventory"];
            this.relationAreaQuaffable = this.Relations["AreaQuaffable"];
            this.relationAreaJunk = this.Relations["AreaJunk"];
            this.relationWieldableInventory = this.Relations["WieldableInventory"];
        }
        
        private void InitClass() {
            this.DataSetName = "Multiverse";
            this.Prefix = "";
            this.Namespace = "http://source.strive3d.net/Application Source/Strive/Data/Multiverse.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablePlayer = new PlayerDataTable();
            this.Tables.Add(this.tablePlayer);
            this.tableWorld = new WorldDataTable();
            this.Tables.Add(this.tableWorld);
            this.tableArea = new AreaDataTable();
            this.Tables.Add(this.tableArea);
            this.tableMobile = new MobileDataTable();
            this.Tables.Add(this.tableMobile);
            this.tableQuaffable = new QuaffableDataTable();
            this.Tables.Add(this.tableQuaffable);
            this.tableJunk = new JunkDataTable();
            this.Tables.Add(this.tableJunk);
            this.tableTerrain = new TerrainDataTable();
            this.Tables.Add(this.tableTerrain);
            this.tableWieldable = new WieldableDataTable();
            this.Tables.Add(this.tableWieldable);
            this.tableMobilePossesableByPlayer = new MobilePossesableByPlayerDataTable();
            this.Tables.Add(this.tableMobilePossesableByPlayer);
            this.tableInventory = new InventoryDataTable();
            this.Tables.Add(this.tableInventory);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("WorldArea", new DataColumn[] {
                        this.tableWorld.WorldIDColumn}, new DataColumn[] {
                        this.tableArea.WorldIDColumn});
            this.tableArea.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("AreaMobile", new DataColumn[] {
                        this.tableArea.AreaIDColumn}, new DataColumn[] {
                        this.tableMobile.AreaIDColumn});
            this.tableMobile.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("AreaQuaffable", new DataColumn[] {
                        this.tableArea.AreaIDColumn}, new DataColumn[] {
                        this.tableQuaffable.AreaIDColumn});
            this.tableQuaffable.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("AreaJunk", new DataColumn[] {
                        this.tableArea.AreaIDColumn}, new DataColumn[] {
                        this.tableJunk.AreaIDColumn});
            this.tableJunk.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("AreaTerrain", new DataColumn[] {
                        this.tableArea.AreaIDColumn}, new DataColumn[] {
                        this.tableTerrain.AreaIDColumn});
            this.tableTerrain.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("AreaWieldable", new DataColumn[] {
                        this.tableArea.AreaIDColumn}, new DataColumn[] {
                        this.tableWieldable.AreaIDColumn});
            this.tableWieldable.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("PlayerMobilePossesableByPlayer", new DataColumn[] {
                        this.tablePlayer.PlayerIDColumn}, new DataColumn[] {
                        this.tableMobilePossesableByPlayer.PlayerIDColumn});
            this.tableMobilePossesableByPlayer.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("MobileMobilePossesableByPlayer", new DataColumn[] {
                        this.tableMobile.SpawnIDColumn}, new DataColumn[] {
                        this.tableMobilePossesableByPlayer.SpawnIDColumn});
            this.tableMobilePossesableByPlayer.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("MobileInventory", new DataColumn[] {
                        this.tableMobile.SpawnIDColumn}, new DataColumn[] {
                        this.tableInventory.SpawnIDColumn});
            this.tableInventory.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("WieldableInventory", new DataColumn[] {
                        this.tableWieldable.SpawnIDColumn}, new DataColumn[] {
                        this.tableInventory.SpawnIDColumn});
            this.tableInventory.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            this.relationWorldArea = new DataRelation("WorldArea", new DataColumn[] {
                        this.tableWorld.WorldIDColumn}, new DataColumn[] {
                        this.tableArea.WorldIDColumn}, false);
            this.Relations.Add(this.relationWorldArea);
            this.relationAreaTerrain = new DataRelation("AreaTerrain", new DataColumn[] {
                        this.tableArea.AreaIDColumn}, new DataColumn[] {
                        this.tableTerrain.AreaIDColumn}, false);
            this.Relations.Add(this.relationAreaTerrain);
            this.relationAreaWieldable = new DataRelation("AreaWieldable", new DataColumn[] {
                        this.tableArea.AreaIDColumn}, new DataColumn[] {
                        this.tableWieldable.AreaIDColumn}, false);
            this.Relations.Add(this.relationAreaWieldable);
            this.relationPlayerMobilePossesableByPlayer = new DataRelation("PlayerMobilePossesableByPlayer", new DataColumn[] {
                        this.tablePlayer.PlayerIDColumn}, new DataColumn[] {
                        this.tableMobilePossesableByPlayer.PlayerIDColumn}, false);
            this.Relations.Add(this.relationPlayerMobilePossesableByPlayer);
            this.relationAreaMobile = new DataRelation("AreaMobile", new DataColumn[] {
                        this.tableArea.AreaIDColumn}, new DataColumn[] {
                        this.tableMobile.AreaIDColumn}, false);
            this.Relations.Add(this.relationAreaMobile);
            this.relationMobileMobilePossesableByPlayer = new DataRelation("MobileMobilePossesableByPlayer", new DataColumn[] {
                        this.tableMobile.SpawnIDColumn}, new DataColumn[] {
                        this.tableMobilePossesableByPlayer.SpawnIDColumn}, false);
            this.Relations.Add(this.relationMobileMobilePossesableByPlayer);
            this.relationMobileInventory = new DataRelation("MobileInventory", new DataColumn[] {
                        this.tableMobile.SpawnIDColumn}, new DataColumn[] {
                        this.tableInventory.SpawnIDColumn}, false);
            this.Relations.Add(this.relationMobileInventory);
            this.relationAreaQuaffable = new DataRelation("AreaQuaffable", new DataColumn[] {
                        this.tableArea.AreaIDColumn}, new DataColumn[] {
                        this.tableQuaffable.AreaIDColumn}, false);
            this.Relations.Add(this.relationAreaQuaffable);
            this.relationAreaJunk = new DataRelation("AreaJunk", new DataColumn[] {
                        this.tableArea.AreaIDColumn}, new DataColumn[] {
                        this.tableJunk.AreaIDColumn}, false);
            this.Relations.Add(this.relationAreaJunk);
            this.relationWieldableInventory = new DataRelation("WieldableInventory", new DataColumn[] {
                        this.tableWieldable.SpawnIDColumn}, new DataColumn[] {
                        this.tableInventory.SpawnIDColumn}, false);
            this.Relations.Add(this.relationWieldableInventory);
        }
        
        private bool ShouldSerializePlayer() {
            return false;
        }
        
        private bool ShouldSerializeWorld() {
            return false;
        }
        
        private bool ShouldSerializeArea() {
            return false;
        }
        
        private bool ShouldSerializeMobile() {
            return false;
        }
        
        private bool ShouldSerializeQuaffable() {
            return false;
        }
        
        private bool ShouldSerializeJunk() {
            return false;
        }
        
        private bool ShouldSerializeTerrain() {
            return false;
        }
        
        private bool ShouldSerializeWieldable() {
            return false;
        }
        
        private bool ShouldSerializeMobilePossesableByPlayer() {
            return false;
        }
        
        private bool ShouldSerializeInventory() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void PlayerRowChangeEventHandler(object sender, PlayerRowChangeEvent e);
        
        public delegate void WorldRowChangeEventHandler(object sender, WorldRowChangeEvent e);
        
        public delegate void AreaRowChangeEventHandler(object sender, AreaRowChangeEvent e);
        
        public delegate void MobileRowChangeEventHandler(object sender, MobileRowChangeEvent e);
        
        public delegate void QuaffableRowChangeEventHandler(object sender, QuaffableRowChangeEvent e);
        
        public delegate void JunkRowChangeEventHandler(object sender, JunkRowChangeEvent e);
        
        public delegate void TerrainRowChangeEventHandler(object sender, TerrainRowChangeEvent e);
        
        public delegate void WieldableRowChangeEventHandler(object sender, WieldableRowChangeEvent e);
        
        public delegate void MobilePossesableByPlayerRowChangeEventHandler(object sender, MobilePossesableByPlayerRowChangeEvent e);
        
        public delegate void InventoryRowChangeEventHandler(object sender, InventoryRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PlayerDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPlayerID;
            
            private DataColumn columnUserName;
            
            private DataColumn columnPassword;
            
            private DataColumn columnEmail;
            
            internal PlayerDataTable() : 
                    base("Player") {
                this.InitClass();
            }
            
            internal PlayerDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PlayerIDColumn {
                get {
                    return this.columnPlayerID;
                }
            }
            
            internal DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            internal DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            internal DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            public PlayerRow this[int index] {
                get {
                    return ((PlayerRow)(this.Rows[index]));
                }
            }
            
            public event PlayerRowChangeEventHandler PlayerRowChanged;
            
            public event PlayerRowChangeEventHandler PlayerRowChanging;
            
            public event PlayerRowChangeEventHandler PlayerRowDeleted;
            
            public event PlayerRowChangeEventHandler PlayerRowDeleting;
            
            public void AddPlayerRow(PlayerRow row) {
                this.Rows.Add(row);
            }
            
            public PlayerRow AddPlayerRow(string UserName, string Password, string Email) {
                PlayerRow rowPlayerRow = ((PlayerRow)(this.NewRow()));
                rowPlayerRow.ItemArray = new object[] {
                        null,
                        UserName,
                        Password,
                        Email};
                this.Rows.Add(rowPlayerRow);
                return rowPlayerRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PlayerDataTable cln = ((PlayerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PlayerDataTable();
            }
            
            internal void InitVars() {
                this.columnPlayerID = this.Columns["PlayerID"];
                this.columnUserName = this.Columns["UserName"];
                this.columnPassword = this.Columns["Password"];
                this.columnEmail = this.Columns["Email"];
            }
            
            private void InitClass() {
                this.columnPlayerID = new DataColumn("PlayerID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPlayerID);
                this.columnUserName = new DataColumn("UserName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserName);
                this.columnPassword = new DataColumn("Password", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPassword);
                this.columnEmail = new DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmail);
                this.Constraints.Add(new UniqueConstraint("PlayerPK", new DataColumn[] {
                                this.columnPlayerID}, false));
                this.columnPlayerID.AutoIncrement = true;
                this.columnPlayerID.AllowDBNull = false;
                this.columnPlayerID.ReadOnly = true;
                this.columnPlayerID.Unique = true;
                this.columnUserName.AllowDBNull = false;
                this.columnPassword.AllowDBNull = false;
                this.columnEmail.AllowDBNull = false;
            }
            
            public PlayerRow NewPlayerRow() {
                return ((PlayerRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PlayerRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PlayerRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PlayerRowChanged != null)) {
                    this.PlayerRowChanged(this, new PlayerRowChangeEvent(((PlayerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PlayerRowChanging != null)) {
                    this.PlayerRowChanging(this, new PlayerRowChangeEvent(((PlayerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PlayerRowDeleted != null)) {
                    this.PlayerRowDeleted(this, new PlayerRowChangeEvent(((PlayerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PlayerRowDeleting != null)) {
                    this.PlayerRowDeleting(this, new PlayerRowChangeEvent(((PlayerRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePlayerRow(PlayerRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PlayerRow : DataRow {
            
            private PlayerDataTable tablePlayer;
            
            internal PlayerRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePlayer = ((PlayerDataTable)(this.Table));
            }
            
            public int PlayerID {
                get {
                    return ((int)(this[this.tablePlayer.PlayerIDColumn]));
                }
                set {
                    this[this.tablePlayer.PlayerIDColumn] = value;
                }
            }
            
            public string UserName {
                get {
                    return ((string)(this[this.tablePlayer.UserNameColumn]));
                }
                set {
                    this[this.tablePlayer.UserNameColumn] = value;
                }
            }
            
            public string Password {
                get {
                    return ((string)(this[this.tablePlayer.PasswordColumn]));
                }
                set {
                    this[this.tablePlayer.PasswordColumn] = value;
                }
            }
            
            public string Email {
                get {
                    return ((string)(this[this.tablePlayer.EmailColumn]));
                }
                set {
                    this[this.tablePlayer.EmailColumn] = value;
                }
            }
            
            public MobilePossesableByPlayerRow[] GetMobilePossesableByPlayerRows() {
                return ((MobilePossesableByPlayerRow[])(this.GetChildRows(this.Table.ChildRelations["PlayerMobilePossesableByPlayer"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PlayerRowChangeEvent : EventArgs {
            
            private PlayerRow eventRow;
            
            private DataRowAction eventAction;
            
            public PlayerRowChangeEvent(PlayerRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PlayerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WorldDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnWorldID;
            
            private DataColumn columnWorldName;
            
            private DataColumn columnDescription;
            
            internal WorldDataTable() : 
                    base("World") {
                this.InitClass();
            }
            
            internal WorldDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn WorldIDColumn {
                get {
                    return this.columnWorldID;
                }
            }
            
            internal DataColumn WorldNameColumn {
                get {
                    return this.columnWorldName;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            public WorldRow this[int index] {
                get {
                    return ((WorldRow)(this.Rows[index]));
                }
            }
            
            public event WorldRowChangeEventHandler WorldRowChanged;
            
            public event WorldRowChangeEventHandler WorldRowChanging;
            
            public event WorldRowChangeEventHandler WorldRowDeleted;
            
            public event WorldRowChangeEventHandler WorldRowDeleting;
            
            public void AddWorldRow(WorldRow row) {
                this.Rows.Add(row);
            }
            
            public WorldRow AddWorldRow(int WorldID, string WorldName, string Description) {
                WorldRow rowWorldRow = ((WorldRow)(this.NewRow()));
                rowWorldRow.ItemArray = new object[] {
                        WorldID,
                        WorldName,
                        Description};
                this.Rows.Add(rowWorldRow);
                return rowWorldRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                WorldDataTable cln = ((WorldDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new WorldDataTable();
            }
            
            internal void InitVars() {
                this.columnWorldID = this.Columns["WorldID"];
                this.columnWorldName = this.Columns["WorldName"];
                this.columnDescription = this.Columns["Description"];
            }
            
            private void InitClass() {
                this.columnWorldID = new DataColumn("WorldID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWorldID);
                this.columnWorldName = new DataColumn("WorldName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWorldName);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.Constraints.Add(new UniqueConstraint("WorldPK", new DataColumn[] {
                                this.columnWorldID}, false));
                this.columnWorldID.AllowDBNull = false;
                this.columnWorldID.Unique = true;
                this.columnWorldName.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
            }
            
            public WorldRow NewWorldRow() {
                return ((WorldRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new WorldRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(WorldRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WorldRowChanged != null)) {
                    this.WorldRowChanged(this, new WorldRowChangeEvent(((WorldRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WorldRowChanging != null)) {
                    this.WorldRowChanging(this, new WorldRowChangeEvent(((WorldRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WorldRowDeleted != null)) {
                    this.WorldRowDeleted(this, new WorldRowChangeEvent(((WorldRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WorldRowDeleting != null)) {
                    this.WorldRowDeleting(this, new WorldRowChangeEvent(((WorldRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveWorldRow(WorldRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WorldRow : DataRow {
            
            private WorldDataTable tableWorld;
            
            internal WorldRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableWorld = ((WorldDataTable)(this.Table));
            }
            
            public int WorldID {
                get {
                    return ((int)(this[this.tableWorld.WorldIDColumn]));
                }
                set {
                    this[this.tableWorld.WorldIDColumn] = value;
                }
            }
            
            public string WorldName {
                get {
                    return ((string)(this[this.tableWorld.WorldNameColumn]));
                }
                set {
                    this[this.tableWorld.WorldNameColumn] = value;
                }
            }
            
            public string Description {
                get {
                    return ((string)(this[this.tableWorld.DescriptionColumn]));
                }
                set {
                    this[this.tableWorld.DescriptionColumn] = value;
                }
            }
            
            public AreaRow[] GetAreaRows() {
                return ((AreaRow[])(this.GetChildRows(this.Table.ChildRelations["WorldArea"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WorldRowChangeEvent : EventArgs {
            
            private WorldRow eventRow;
            
            private DataRowAction eventAction;
            
            public WorldRowChangeEvent(WorldRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public WorldRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AreaDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAreaID;
            
            private DataColumn columnWorldID;
            
            private DataColumn columnAreaName;
            
            private DataColumn columnLowX;
            
            private DataColumn columnLowY;
            
            private DataColumn columnLowZ;
            
            private DataColumn columnHighX;
            
            private DataColumn columnHighY;
            
            private DataColumn columnHighZ;
            
            private DataColumn columnControllingClan;
            
            private DataColumn columnDescription;
            
            internal AreaDataTable() : 
                    base("Area") {
                this.InitClass();
            }
            
            internal AreaDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AreaIDColumn {
                get {
                    return this.columnAreaID;
                }
            }
            
            internal DataColumn WorldIDColumn {
                get {
                    return this.columnWorldID;
                }
            }
            
            internal DataColumn AreaNameColumn {
                get {
                    return this.columnAreaName;
                }
            }
            
            internal DataColumn LowXColumn {
                get {
                    return this.columnLowX;
                }
            }
            
            internal DataColumn LowYColumn {
                get {
                    return this.columnLowY;
                }
            }
            
            internal DataColumn LowZColumn {
                get {
                    return this.columnLowZ;
                }
            }
            
            internal DataColumn HighXColumn {
                get {
                    return this.columnHighX;
                }
            }
            
            internal DataColumn HighYColumn {
                get {
                    return this.columnHighY;
                }
            }
            
            internal DataColumn HighZColumn {
                get {
                    return this.columnHighZ;
                }
            }
            
            internal DataColumn ControllingClanColumn {
                get {
                    return this.columnControllingClan;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            public AreaRow this[int index] {
                get {
                    return ((AreaRow)(this.Rows[index]));
                }
            }
            
            public event AreaRowChangeEventHandler AreaRowChanged;
            
            public event AreaRowChangeEventHandler AreaRowChanging;
            
            public event AreaRowChangeEventHandler AreaRowDeleted;
            
            public event AreaRowChangeEventHandler AreaRowDeleting;
            
            public void AddAreaRow(AreaRow row) {
                this.Rows.Add(row);
            }
            
            public AreaRow AddAreaRow(int AreaID, WorldRow parentWorldRowByWorldArea, string AreaName, int LowX, int LowY, int LowZ, int HighX, int HighY, int HighZ, int ControllingClan, string Description) {
                AreaRow rowAreaRow = ((AreaRow)(this.NewRow()));
                rowAreaRow.ItemArray = new object[] {
                        AreaID,
                        parentWorldRowByWorldArea[0],
                        AreaName,
                        LowX,
                        LowY,
                        LowZ,
                        HighX,
                        HighY,
                        HighZ,
                        ControllingClan,
                        Description};
                this.Rows.Add(rowAreaRow);
                return rowAreaRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AreaDataTable cln = ((AreaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AreaDataTable();
            }
            
            internal void InitVars() {
                this.columnAreaID = this.Columns["AreaID"];
                this.columnWorldID = this.Columns["WorldID"];
                this.columnAreaName = this.Columns["AreaName"];
                this.columnLowX = this.Columns["LowX"];
                this.columnLowY = this.Columns["LowY"];
                this.columnLowZ = this.Columns["LowZ"];
                this.columnHighX = this.Columns["HighX"];
                this.columnHighY = this.Columns["HighY"];
                this.columnHighZ = this.Columns["HighZ"];
                this.columnControllingClan = this.Columns["ControllingClan"];
                this.columnDescription = this.Columns["Description"];
            }
            
            private void InitClass() {
                this.columnAreaID = new DataColumn("AreaID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAreaID);
                this.columnWorldID = new DataColumn("WorldID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWorldID);
                this.columnAreaName = new DataColumn("AreaName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAreaName);
                this.columnLowX = new DataColumn("LowX", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLowX);
                this.columnLowY = new DataColumn("LowY", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLowY);
                this.columnLowZ = new DataColumn("LowZ", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLowZ);
                this.columnHighX = new DataColumn("HighX", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHighX);
                this.columnHighY = new DataColumn("HighY", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHighY);
                this.columnHighZ = new DataColumn("HighZ", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHighZ);
                this.columnControllingClan = new DataColumn("ControllingClan", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnControllingClan);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.Constraints.Add(new UniqueConstraint("AreaPK", new DataColumn[] {
                                this.columnAreaID}, false));
                this.columnAreaID.AllowDBNull = false;
                this.columnAreaID.Unique = true;
                this.columnWorldID.AllowDBNull = false;
                this.columnAreaName.AllowDBNull = false;
                this.columnLowX.AllowDBNull = false;
                this.columnLowY.AllowDBNull = false;
                this.columnLowZ.AllowDBNull = false;
                this.columnHighX.AllowDBNull = false;
                this.columnHighY.AllowDBNull = false;
                this.columnHighZ.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
            }
            
            public AreaRow NewAreaRow() {
                return ((AreaRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AreaRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AreaRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AreaRowChanged != null)) {
                    this.AreaRowChanged(this, new AreaRowChangeEvent(((AreaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AreaRowChanging != null)) {
                    this.AreaRowChanging(this, new AreaRowChangeEvent(((AreaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AreaRowDeleted != null)) {
                    this.AreaRowDeleted(this, new AreaRowChangeEvent(((AreaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AreaRowDeleting != null)) {
                    this.AreaRowDeleting(this, new AreaRowChangeEvent(((AreaRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAreaRow(AreaRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AreaRow : DataRow {
            
            private AreaDataTable tableArea;
            
            internal AreaRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableArea = ((AreaDataTable)(this.Table));
            }
            
            public int AreaID {
                get {
                    return ((int)(this[this.tableArea.AreaIDColumn]));
                }
                set {
                    this[this.tableArea.AreaIDColumn] = value;
                }
            }
            
            public int WorldID {
                get {
                    return ((int)(this[this.tableArea.WorldIDColumn]));
                }
                set {
                    this[this.tableArea.WorldIDColumn] = value;
                }
            }
            
            public string AreaName {
                get {
                    return ((string)(this[this.tableArea.AreaNameColumn]));
                }
                set {
                    this[this.tableArea.AreaNameColumn] = value;
                }
            }
            
            public int LowX {
                get {
                    return ((int)(this[this.tableArea.LowXColumn]));
                }
                set {
                    this[this.tableArea.LowXColumn] = value;
                }
            }
            
            public int LowY {
                get {
                    return ((int)(this[this.tableArea.LowYColumn]));
                }
                set {
                    this[this.tableArea.LowYColumn] = value;
                }
            }
            
            public int LowZ {
                get {
                    return ((int)(this[this.tableArea.LowZColumn]));
                }
                set {
                    this[this.tableArea.LowZColumn] = value;
                }
            }
            
            public int HighX {
                get {
                    return ((int)(this[this.tableArea.HighXColumn]));
                }
                set {
                    this[this.tableArea.HighXColumn] = value;
                }
            }
            
            public int HighY {
                get {
                    return ((int)(this[this.tableArea.HighYColumn]));
                }
                set {
                    this[this.tableArea.HighYColumn] = value;
                }
            }
            
            public int HighZ {
                get {
                    return ((int)(this[this.tableArea.HighZColumn]));
                }
                set {
                    this[this.tableArea.HighZColumn] = value;
                }
            }
            
            public int ControllingClan {
                get {
                    try {
                        return ((int)(this[this.tableArea.ControllingClanColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArea.ControllingClanColumn] = value;
                }
            }
            
            public string Description {
                get {
                    return ((string)(this[this.tableArea.DescriptionColumn]));
                }
                set {
                    this[this.tableArea.DescriptionColumn] = value;
                }
            }
            
            public WorldRow WorldRow {
                get {
                    return ((WorldRow)(this.GetParentRow(this.Table.ParentRelations["WorldArea"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["WorldArea"]);
                }
            }
            
            public bool IsControllingClanNull() {
                return this.IsNull(this.tableArea.ControllingClanColumn);
            }
            
            public void SetControllingClanNull() {
                this[this.tableArea.ControllingClanColumn] = System.Convert.DBNull;
            }
            
            public TerrainRow[] GetTerrainRows() {
                return ((TerrainRow[])(this.GetChildRows(this.Table.ChildRelations["AreaTerrain"])));
            }
            
            public WieldableRow[] GetWieldableRows() {
                return ((WieldableRow[])(this.GetChildRows(this.Table.ChildRelations["AreaWieldable"])));
            }
            
            public MobileRow[] GetMobileRows() {
                return ((MobileRow[])(this.GetChildRows(this.Table.ChildRelations["AreaMobile"])));
            }
            
            public QuaffableRow[] GetQuaffableRows() {
                return ((QuaffableRow[])(this.GetChildRows(this.Table.ChildRelations["AreaQuaffable"])));
            }
            
            public JunkRow[] GetJunkRows() {
                return ((JunkRow[])(this.GetChildRows(this.Table.ChildRelations["AreaJunk"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AreaRowChangeEvent : EventArgs {
            
            private AreaRow eventRow;
            
            private DataRowAction eventAction;
            
            public AreaRowChangeEvent(AreaRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AreaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MobileDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAreaID;
            
            private DataColumn columnPhysicalObjectName;
            
            private DataColumn columnModelID;
            
            private DataColumn columnX;
            
            private DataColumn columnY;
            
            private DataColumn columnZ;
            
            private DataColumn columnHeadingX;
            
            private DataColumn columnHeadingY;
            
            private DataColumn columnHeadingZ;
            
            private DataColumn columnSpawnID;
            
            private DataColumn columnMobileID;
            
            private DataColumn columnRaceID;
            
            private DataColumn columnLevel;
            
            private DataColumn columnConstitution;
            
            private DataColumn columnStrength;
            
            private DataColumn columnCognition;
            
            private DataColumn columnWillpower;
            
            private DataColumn columnDexterity;
            
            private DataColumn columnGoldCarried;
            
            private DataColumn columnGoldBanked;
            
            internal MobileDataTable() : 
                    base("Mobile") {
                this.InitClass();
            }
            
            internal MobileDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AreaIDColumn {
                get {
                    return this.columnAreaID;
                }
            }
            
            internal DataColumn PhysicalObjectNameColumn {
                get {
                    return this.columnPhysicalObjectName;
                }
            }
            
            internal DataColumn ModelIDColumn {
                get {
                    return this.columnModelID;
                }
            }
            
            internal DataColumn XColumn {
                get {
                    return this.columnX;
                }
            }
            
            internal DataColumn YColumn {
                get {
                    return this.columnY;
                }
            }
            
            internal DataColumn ZColumn {
                get {
                    return this.columnZ;
                }
            }
            
            internal DataColumn HeadingXColumn {
                get {
                    return this.columnHeadingX;
                }
            }
            
            internal DataColumn HeadingYColumn {
                get {
                    return this.columnHeadingY;
                }
            }
            
            internal DataColumn HeadingZColumn {
                get {
                    return this.columnHeadingZ;
                }
            }
            
            internal DataColumn SpawnIDColumn {
                get {
                    return this.columnSpawnID;
                }
            }
            
            internal DataColumn MobileIDColumn {
                get {
                    return this.columnMobileID;
                }
            }
            
            internal DataColumn RaceIDColumn {
                get {
                    return this.columnRaceID;
                }
            }
            
            internal DataColumn LevelColumn {
                get {
                    return this.columnLevel;
                }
            }
            
            internal DataColumn ConstitutionColumn {
                get {
                    return this.columnConstitution;
                }
            }
            
            internal DataColumn StrengthColumn {
                get {
                    return this.columnStrength;
                }
            }
            
            internal DataColumn CognitionColumn {
                get {
                    return this.columnCognition;
                }
            }
            
            internal DataColumn WillpowerColumn {
                get {
                    return this.columnWillpower;
                }
            }
            
            internal DataColumn DexterityColumn {
                get {
                    return this.columnDexterity;
                }
            }
            
            internal DataColumn GoldCarriedColumn {
                get {
                    return this.columnGoldCarried;
                }
            }
            
            internal DataColumn GoldBankedColumn {
                get {
                    return this.columnGoldBanked;
                }
            }
            
            public MobileRow this[int index] {
                get {
                    return ((MobileRow)(this.Rows[index]));
                }
            }
            
            public event MobileRowChangeEventHandler MobileRowChanged;
            
            public event MobileRowChangeEventHandler MobileRowChanging;
            
            public event MobileRowChangeEventHandler MobileRowDeleted;
            
            public event MobileRowChangeEventHandler MobileRowDeleting;
            
            public void AddMobileRow(MobileRow row) {
                this.Rows.Add(row);
            }
            
            public MobileRow AddMobileRow(
                        AreaRow parentAreaRowByAreaMobile, 
                        string PhysicalObjectName, 
                        int ModelID, 
                        int X, 
                        int Y, 
                        int Z, 
                        int HeadingX, 
                        int HeadingY, 
                        int HeadingZ, 
                        int SpawnID, 
                        int MobileID, 
                        int RaceID, 
                        int Level, 
                        int Constitution, 
                        int Strength, 
                        int Cognition, 
                        int Willpower, 
                        int Dexterity, 
                        int GoldCarried, 
                        int GoldBanked) {
                MobileRow rowMobileRow = ((MobileRow)(this.NewRow()));
                rowMobileRow.ItemArray = new object[] {
                        parentAreaRowByAreaMobile[0],
                        PhysicalObjectName,
                        ModelID,
                        X,
                        Y,
                        Z,
                        HeadingX,
                        HeadingY,
                        HeadingZ,
                        SpawnID,
                        MobileID,
                        RaceID,
                        Level,
                        Constitution,
                        Strength,
                        Cognition,
                        Willpower,
                        Dexterity,
                        GoldCarried,
                        GoldBanked};
                this.Rows.Add(rowMobileRow);
                return rowMobileRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MobileDataTable cln = ((MobileDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MobileDataTable();
            }
            
            internal void InitVars() {
                this.columnAreaID = this.Columns["AreaID"];
                this.columnPhysicalObjectName = this.Columns["PhysicalObjectName"];
                this.columnModelID = this.Columns["ModelID"];
                this.columnX = this.Columns["X"];
                this.columnY = this.Columns["Y"];
                this.columnZ = this.Columns["Z"];
                this.columnHeadingX = this.Columns["HeadingX"];
                this.columnHeadingY = this.Columns["HeadingY"];
                this.columnHeadingZ = this.Columns["HeadingZ"];
                this.columnSpawnID = this.Columns["SpawnID"];
                this.columnMobileID = this.Columns["MobileID"];
                this.columnRaceID = this.Columns["RaceID"];
                this.columnLevel = this.Columns["Level"];
                this.columnConstitution = this.Columns["Constitution"];
                this.columnStrength = this.Columns["Strength"];
                this.columnCognition = this.Columns["Cognition"];
                this.columnWillpower = this.Columns["Willpower"];
                this.columnDexterity = this.Columns["Dexterity"];
                this.columnGoldCarried = this.Columns["GoldCarried"];
                this.columnGoldBanked = this.Columns["GoldBanked"];
            }
            
            private void InitClass() {
                this.columnAreaID = new DataColumn("AreaID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAreaID);
                this.columnPhysicalObjectName = new DataColumn("PhysicalObjectName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhysicalObjectName);
                this.columnModelID = new DataColumn("ModelID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModelID);
                this.columnX = new DataColumn("X", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnX);
                this.columnY = new DataColumn("Y", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnY);
                this.columnZ = new DataColumn("Z", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnZ);
                this.columnHeadingX = new DataColumn("HeadingX", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeadingX);
                this.columnHeadingY = new DataColumn("HeadingY", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeadingY);
                this.columnHeadingZ = new DataColumn("HeadingZ", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeadingZ);
                this.columnSpawnID = new DataColumn("SpawnID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSpawnID);
                this.columnMobileID = new DataColumn("MobileID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMobileID);
                this.columnRaceID = new DataColumn("RaceID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRaceID);
                this.columnLevel = new DataColumn("Level", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLevel);
                this.columnConstitution = new DataColumn("Constitution", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConstitution);
                this.columnStrength = new DataColumn("Strength", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStrength);
                this.columnCognition = new DataColumn("Cognition", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCognition);
                this.columnWillpower = new DataColumn("Willpower", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWillpower);
                this.columnDexterity = new DataColumn("Dexterity", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDexterity);
                this.columnGoldCarried = new DataColumn("GoldCarried", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGoldCarried);
                this.columnGoldBanked = new DataColumn("GoldBanked", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGoldBanked);
                this.Constraints.Add(new UniqueConstraint("MobilePK", new DataColumn[] {
                                this.columnSpawnID}, false));
                this.columnAreaID.AllowDBNull = false;
                this.columnPhysicalObjectName.AllowDBNull = false;
                this.columnModelID.AllowDBNull = false;
                this.columnSpawnID.AllowDBNull = false;
                this.columnSpawnID.Unique = true;
                this.columnMobileID.AllowDBNull = false;
                this.columnRaceID.AllowDBNull = false;
                this.columnLevel.AllowDBNull = false;
                this.columnConstitution.AllowDBNull = false;
                this.columnStrength.AllowDBNull = false;
                this.columnCognition.AllowDBNull = false;
                this.columnWillpower.AllowDBNull = false;
                this.columnDexterity.AllowDBNull = false;
                this.columnGoldCarried.AllowDBNull = false;
                this.columnGoldBanked.AllowDBNull = false;
            }
            
            public MobileRow NewMobileRow() {
                return ((MobileRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MobileRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MobileRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MobileRowChanged != null)) {
                    this.MobileRowChanged(this, new MobileRowChangeEvent(((MobileRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MobileRowChanging != null)) {
                    this.MobileRowChanging(this, new MobileRowChangeEvent(((MobileRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MobileRowDeleted != null)) {
                    this.MobileRowDeleted(this, new MobileRowChangeEvent(((MobileRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MobileRowDeleting != null)) {
                    this.MobileRowDeleting(this, new MobileRowChangeEvent(((MobileRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMobileRow(MobileRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MobileRow : DataRow {
            
            private MobileDataTable tableMobile;
            
            internal MobileRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMobile = ((MobileDataTable)(this.Table));
            }
            
            public int AreaID {
                get {
                    return ((int)(this[this.tableMobile.AreaIDColumn]));
                }
                set {
                    this[this.tableMobile.AreaIDColumn] = value;
                }
            }
            
            public string PhysicalObjectName {
                get {
                    return ((string)(this[this.tableMobile.PhysicalObjectNameColumn]));
                }
                set {
                    this[this.tableMobile.PhysicalObjectNameColumn] = value;
                }
            }
            
            public int ModelID {
                get {
                    return ((int)(this[this.tableMobile.ModelIDColumn]));
                }
                set {
                    this[this.tableMobile.ModelIDColumn] = value;
                }
            }
            
            public int X {
                get {
                    try {
                        return ((int)(this[this.tableMobile.XColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMobile.XColumn] = value;
                }
            }
            
            public int Y {
                get {
                    try {
                        return ((int)(this[this.tableMobile.YColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMobile.YColumn] = value;
                }
            }
            
            public int Z {
                get {
                    try {
                        return ((int)(this[this.tableMobile.ZColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMobile.ZColumn] = value;
                }
            }
            
            public int HeadingX {
                get {
                    try {
                        return ((int)(this[this.tableMobile.HeadingXColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMobile.HeadingXColumn] = value;
                }
            }
            
            public int HeadingY {
                get {
                    try {
                        return ((int)(this[this.tableMobile.HeadingYColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMobile.HeadingYColumn] = value;
                }
            }
            
            public int HeadingZ {
                get {
                    try {
                        return ((int)(this[this.tableMobile.HeadingZColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMobile.HeadingZColumn] = value;
                }
            }
            
            public int SpawnID {
                get {
                    return ((int)(this[this.tableMobile.SpawnIDColumn]));
                }
                set {
                    this[this.tableMobile.SpawnIDColumn] = value;
                }
            }
            
            public int MobileID {
                get {
                    return ((int)(this[this.tableMobile.MobileIDColumn]));
                }
                set {
                    this[this.tableMobile.MobileIDColumn] = value;
                }
            }
            
            public int RaceID {
                get {
                    return ((int)(this[this.tableMobile.RaceIDColumn]));
                }
                set {
                    this[this.tableMobile.RaceIDColumn] = value;
                }
            }
            
            public int Level {
                get {
                    return ((int)(this[this.tableMobile.LevelColumn]));
                }
                set {
                    this[this.tableMobile.LevelColumn] = value;
                }
            }
            
            public int Constitution {
                get {
                    return ((int)(this[this.tableMobile.ConstitutionColumn]));
                }
                set {
                    this[this.tableMobile.ConstitutionColumn] = value;
                }
            }
            
            public int Strength {
                get {
                    return ((int)(this[this.tableMobile.StrengthColumn]));
                }
                set {
                    this[this.tableMobile.StrengthColumn] = value;
                }
            }
            
            public int Cognition {
                get {
                    return ((int)(this[this.tableMobile.CognitionColumn]));
                }
                set {
                    this[this.tableMobile.CognitionColumn] = value;
                }
            }
            
            public int Willpower {
                get {
                    return ((int)(this[this.tableMobile.WillpowerColumn]));
                }
                set {
                    this[this.tableMobile.WillpowerColumn] = value;
                }
            }
            
            public int Dexterity {
                get {
                    return ((int)(this[this.tableMobile.DexterityColumn]));
                }
                set {
                    this[this.tableMobile.DexterityColumn] = value;
                }
            }
            
            public int GoldCarried {
                get {
                    return ((int)(this[this.tableMobile.GoldCarriedColumn]));
                }
                set {
                    this[this.tableMobile.GoldCarriedColumn] = value;
                }
            }
            
            public int GoldBanked {
                get {
                    return ((int)(this[this.tableMobile.GoldBankedColumn]));
                }
                set {
                    this[this.tableMobile.GoldBankedColumn] = value;
                }
            }
            
            public AreaRow AreaRow {
                get {
                    return ((AreaRow)(this.GetParentRow(this.Table.ParentRelations["AreaMobile"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AreaMobile"]);
                }
            }
            
            public bool IsXNull() {
                return this.IsNull(this.tableMobile.XColumn);
            }
            
            public void SetXNull() {
                this[this.tableMobile.XColumn] = System.Convert.DBNull;
            }
            
            public bool IsYNull() {
                return this.IsNull(this.tableMobile.YColumn);
            }
            
            public void SetYNull() {
                this[this.tableMobile.YColumn] = System.Convert.DBNull;
            }
            
            public bool IsZNull() {
                return this.IsNull(this.tableMobile.ZColumn);
            }
            
            public void SetZNull() {
                this[this.tableMobile.ZColumn] = System.Convert.DBNull;
            }
            
            public bool IsHeadingXNull() {
                return this.IsNull(this.tableMobile.HeadingXColumn);
            }
            
            public void SetHeadingXNull() {
                this[this.tableMobile.HeadingXColumn] = System.Convert.DBNull;
            }
            
            public bool IsHeadingYNull() {
                return this.IsNull(this.tableMobile.HeadingYColumn);
            }
            
            public void SetHeadingYNull() {
                this[this.tableMobile.HeadingYColumn] = System.Convert.DBNull;
            }
            
            public bool IsHeadingZNull() {
                return this.IsNull(this.tableMobile.HeadingZColumn);
            }
            
            public void SetHeadingZNull() {
                this[this.tableMobile.HeadingZColumn] = System.Convert.DBNull;
            }
            
            public MobilePossesableByPlayerRow[] GetMobilePossesableByPlayerRows() {
                return ((MobilePossesableByPlayerRow[])(this.GetChildRows(this.Table.ChildRelations["MobileMobilePossesableByPlayer"])));
            }
            
            public InventoryRow[] GetInventoryRows() {
                return ((InventoryRow[])(this.GetChildRows(this.Table.ChildRelations["MobileInventory"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MobileRowChangeEvent : EventArgs {
            
            private MobileRow eventRow;
            
            private DataRowAction eventAction;
            
            public MobileRowChangeEvent(MobileRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MobileRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class QuaffableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAreaID;
            
            private DataColumn columnModelID;
            
            private DataColumn columnPhysicalObjectName;
            
            private DataColumn columnValue;
            
            private DataColumn columnWeight;
            
            private DataColumn columnItemID;
            
            private DataColumn columnLiquidTypeID;
            
            private DataColumn columnCapacity;
            
            private DataColumn columnX;
            
            private DataColumn columnY;
            
            private DataColumn columnSpawnID;
            
            private DataColumn columnZ;
            
            private DataColumn columnHeadingX;
            
            private DataColumn columnHeadingY;
            
            private DataColumn columnHeadingZ;
            
            internal QuaffableDataTable() : 
                    base("Quaffable") {
                this.InitClass();
            }
            
            internal QuaffableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AreaIDColumn {
                get {
                    return this.columnAreaID;
                }
            }
            
            internal DataColumn ModelIDColumn {
                get {
                    return this.columnModelID;
                }
            }
            
            internal DataColumn PhysicalObjectNameColumn {
                get {
                    return this.columnPhysicalObjectName;
                }
            }
            
            internal DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            internal DataColumn WeightColumn {
                get {
                    return this.columnWeight;
                }
            }
            
            internal DataColumn ItemIDColumn {
                get {
                    return this.columnItemID;
                }
            }
            
            internal DataColumn LiquidTypeIDColumn {
                get {
                    return this.columnLiquidTypeID;
                }
            }
            
            internal DataColumn CapacityColumn {
                get {
                    return this.columnCapacity;
                }
            }
            
            internal DataColumn XColumn {
                get {
                    return this.columnX;
                }
            }
            
            internal DataColumn YColumn {
                get {
                    return this.columnY;
                }
            }
            
            internal DataColumn SpawnIDColumn {
                get {
                    return this.columnSpawnID;
                }
            }
            
            internal DataColumn ZColumn {
                get {
                    return this.columnZ;
                }
            }
            
            internal DataColumn HeadingXColumn {
                get {
                    return this.columnHeadingX;
                }
            }
            
            internal DataColumn HeadingYColumn {
                get {
                    return this.columnHeadingY;
                }
            }
            
            internal DataColumn HeadingZColumn {
                get {
                    return this.columnHeadingZ;
                }
            }
            
            public QuaffableRow this[int index] {
                get {
                    return ((QuaffableRow)(this.Rows[index]));
                }
            }
            
            public event QuaffableRowChangeEventHandler QuaffableRowChanged;
            
            public event QuaffableRowChangeEventHandler QuaffableRowChanging;
            
            public event QuaffableRowChangeEventHandler QuaffableRowDeleted;
            
            public event QuaffableRowChangeEventHandler QuaffableRowDeleting;
            
            public void AddQuaffableRow(QuaffableRow row) {
                this.Rows.Add(row);
            }
            
            public QuaffableRow AddQuaffableRow(AreaRow parentAreaRowByAreaQuaffable, int ModelID, string PhysicalObjectName, int Value, int Weight, int ItemID, int LiquidTypeID, int Capacity, int X, int Y, int SpawnID, int Z, int HeadingX, int HeadingY, int HeadingZ) {
                QuaffableRow rowQuaffableRow = ((QuaffableRow)(this.NewRow()));
                rowQuaffableRow.ItemArray = new object[] {
                        parentAreaRowByAreaQuaffable[0],
                        ModelID,
                        PhysicalObjectName,
                        Value,
                        Weight,
                        ItemID,
                        LiquidTypeID,
                        Capacity,
                        X,
                        Y,
                        SpawnID,
                        Z,
                        HeadingX,
                        HeadingY,
                        HeadingZ};
                this.Rows.Add(rowQuaffableRow);
                return rowQuaffableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                QuaffableDataTable cln = ((QuaffableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new QuaffableDataTable();
            }
            
            internal void InitVars() {
                this.columnAreaID = this.Columns["AreaID"];
                this.columnModelID = this.Columns["ModelID"];
                this.columnPhysicalObjectName = this.Columns["PhysicalObjectName"];
                this.columnValue = this.Columns["Value"];
                this.columnWeight = this.Columns["Weight"];
                this.columnItemID = this.Columns["ItemID"];
                this.columnLiquidTypeID = this.Columns["LiquidTypeID"];
                this.columnCapacity = this.Columns["Capacity"];
                this.columnX = this.Columns["X"];
                this.columnY = this.Columns["Y"];
                this.columnSpawnID = this.Columns["SpawnID"];
                this.columnZ = this.Columns["Z"];
                this.columnHeadingX = this.Columns["HeadingX"];
                this.columnHeadingY = this.Columns["HeadingY"];
                this.columnHeadingZ = this.Columns["HeadingZ"];
            }
            
            private void InitClass() {
                this.columnAreaID = new DataColumn("AreaID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAreaID);
                this.columnModelID = new DataColumn("ModelID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModelID);
                this.columnPhysicalObjectName = new DataColumn("PhysicalObjectName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhysicalObjectName);
                this.columnValue = new DataColumn("Value", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnValue);
                this.columnWeight = new DataColumn("Weight", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWeight);
                this.columnItemID = new DataColumn("ItemID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnItemID);
                this.columnLiquidTypeID = new DataColumn("LiquidTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLiquidTypeID);
                this.columnCapacity = new DataColumn("Capacity", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCapacity);
                this.columnX = new DataColumn("X", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnX);
                this.columnY = new DataColumn("Y", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnY);
                this.columnSpawnID = new DataColumn("SpawnID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSpawnID);
                this.columnZ = new DataColumn("Z", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnZ);
                this.columnHeadingX = new DataColumn("HeadingX", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeadingX);
                this.columnHeadingY = new DataColumn("HeadingY", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeadingY);
                this.columnHeadingZ = new DataColumn("HeadingZ", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeadingZ);
                this.Constraints.Add(new UniqueConstraint("QuaffablePK", new DataColumn[] {
                                this.columnSpawnID}, false));
                this.columnAreaID.AllowDBNull = false;
                this.columnModelID.AllowDBNull = false;
                this.columnPhysicalObjectName.AllowDBNull = false;
                this.columnValue.AllowDBNull = false;
                this.columnWeight.AllowDBNull = false;
                this.columnItemID.AllowDBNull = false;
                this.columnLiquidTypeID.AllowDBNull = false;
                this.columnCapacity.AllowDBNull = false;
                this.columnSpawnID.AllowDBNull = false;
                this.columnSpawnID.Unique = true;
            }
            
            public QuaffableRow NewQuaffableRow() {
                return ((QuaffableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new QuaffableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(QuaffableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.QuaffableRowChanged != null)) {
                    this.QuaffableRowChanged(this, new QuaffableRowChangeEvent(((QuaffableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.QuaffableRowChanging != null)) {
                    this.QuaffableRowChanging(this, new QuaffableRowChangeEvent(((QuaffableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.QuaffableRowDeleted != null)) {
                    this.QuaffableRowDeleted(this, new QuaffableRowChangeEvent(((QuaffableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.QuaffableRowDeleting != null)) {
                    this.QuaffableRowDeleting(this, new QuaffableRowChangeEvent(((QuaffableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveQuaffableRow(QuaffableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class QuaffableRow : DataRow {
            
            private QuaffableDataTable tableQuaffable;
            
            internal QuaffableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableQuaffable = ((QuaffableDataTable)(this.Table));
            }
            
            public int AreaID {
                get {
                    return ((int)(this[this.tableQuaffable.AreaIDColumn]));
                }
                set {
                    this[this.tableQuaffable.AreaIDColumn] = value;
                }
            }
            
            public int ModelID {
                get {
                    return ((int)(this[this.tableQuaffable.ModelIDColumn]));
                }
                set {
                    this[this.tableQuaffable.ModelIDColumn] = value;
                }
            }
            
            public string PhysicalObjectName {
                get {
                    return ((string)(this[this.tableQuaffable.PhysicalObjectNameColumn]));
                }
                set {
                    this[this.tableQuaffable.PhysicalObjectNameColumn] = value;
                }
            }
            
            public int Value {
                get {
                    return ((int)(this[this.tableQuaffable.ValueColumn]));
                }
                set {
                    this[this.tableQuaffable.ValueColumn] = value;
                }
            }
            
            public int Weight {
                get {
                    return ((int)(this[this.tableQuaffable.WeightColumn]));
                }
                set {
                    this[this.tableQuaffable.WeightColumn] = value;
                }
            }
            
            public int ItemID {
                get {
                    return ((int)(this[this.tableQuaffable.ItemIDColumn]));
                }
                set {
                    this[this.tableQuaffable.ItemIDColumn] = value;
                }
            }
            
            public int LiquidTypeID {
                get {
                    return ((int)(this[this.tableQuaffable.LiquidTypeIDColumn]));
                }
                set {
                    this[this.tableQuaffable.LiquidTypeIDColumn] = value;
                }
            }
            
            public int Capacity {
                get {
                    return ((int)(this[this.tableQuaffable.CapacityColumn]));
                }
                set {
                    this[this.tableQuaffable.CapacityColumn] = value;
                }
            }
            
            public int X {
                get {
                    try {
                        return ((int)(this[this.tableQuaffable.XColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuaffable.XColumn] = value;
                }
            }
            
            public int Y {
                get {
                    try {
                        return ((int)(this[this.tableQuaffable.YColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuaffable.YColumn] = value;
                }
            }
            
            public int SpawnID {
                get {
                    return ((int)(this[this.tableQuaffable.SpawnIDColumn]));
                }
                set {
                    this[this.tableQuaffable.SpawnIDColumn] = value;
                }
            }
            
            public int Z {
                get {
                    try {
                        return ((int)(this[this.tableQuaffable.ZColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuaffable.ZColumn] = value;
                }
            }
            
            public int HeadingX {
                get {
                    try {
                        return ((int)(this[this.tableQuaffable.HeadingXColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuaffable.HeadingXColumn] = value;
                }
            }
            
            public int HeadingY {
                get {
                    try {
                        return ((int)(this[this.tableQuaffable.HeadingYColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuaffable.HeadingYColumn] = value;
                }
            }
            
            public int HeadingZ {
                get {
                    try {
                        return ((int)(this[this.tableQuaffable.HeadingZColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuaffable.HeadingZColumn] = value;
                }
            }
            
            public AreaRow AreaRow {
                get {
                    return ((AreaRow)(this.GetParentRow(this.Table.ParentRelations["AreaQuaffable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AreaQuaffable"]);
                }
            }
            
            public bool IsXNull() {
                return this.IsNull(this.tableQuaffable.XColumn);
            }
            
            public void SetXNull() {
                this[this.tableQuaffable.XColumn] = System.Convert.DBNull;
            }
            
            public bool IsYNull() {
                return this.IsNull(this.tableQuaffable.YColumn);
            }
            
            public void SetYNull() {
                this[this.tableQuaffable.YColumn] = System.Convert.DBNull;
            }
            
            public bool IsZNull() {
                return this.IsNull(this.tableQuaffable.ZColumn);
            }
            
            public void SetZNull() {
                this[this.tableQuaffable.ZColumn] = System.Convert.DBNull;
            }
            
            public bool IsHeadingXNull() {
                return this.IsNull(this.tableQuaffable.HeadingXColumn);
            }
            
            public void SetHeadingXNull() {
                this[this.tableQuaffable.HeadingXColumn] = System.Convert.DBNull;
            }
            
            public bool IsHeadingYNull() {
                return this.IsNull(this.tableQuaffable.HeadingYColumn);
            }
            
            public void SetHeadingYNull() {
                this[this.tableQuaffable.HeadingYColumn] = System.Convert.DBNull;
            }
            
            public bool IsHeadingZNull() {
                return this.IsNull(this.tableQuaffable.HeadingZColumn);
            }
            
            public void SetHeadingZNull() {
                this[this.tableQuaffable.HeadingZColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class QuaffableRowChangeEvent : EventArgs {
            
            private QuaffableRow eventRow;
            
            private DataRowAction eventAction;
            
            public QuaffableRowChangeEvent(QuaffableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public QuaffableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class JunkDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAreaID;
            
            private DataColumn columnPhysicalObjectName;
            
            private DataColumn columnModelID;
            
            private DataColumn columnSpawnID;
            
            private DataColumn columnY;
            
            private DataColumn columnX;
            
            private DataColumn columnZ;
            
            private DataColumn columnHeadingX;
            
            private DataColumn columnHeadingY;
            
            private DataColumn columnHeadingZ;
            
            private DataColumn columnItemID;
            
            internal JunkDataTable() : 
                    base("Junk") {
                this.InitClass();
            }
            
            internal JunkDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AreaIDColumn {
                get {
                    return this.columnAreaID;
                }
            }
            
            internal DataColumn PhysicalObjectNameColumn {
                get {
                    return this.columnPhysicalObjectName;
                }
            }
            
            internal DataColumn ModelIDColumn {
                get {
                    return this.columnModelID;
                }
            }
            
            internal DataColumn SpawnIDColumn {
                get {
                    return this.columnSpawnID;
                }
            }
            
            internal DataColumn YColumn {
                get {
                    return this.columnY;
                }
            }
            
            internal DataColumn XColumn {
                get {
                    return this.columnX;
                }
            }
            
            internal DataColumn ZColumn {
                get {
                    return this.columnZ;
                }
            }
            
            internal DataColumn HeadingXColumn {
                get {
                    return this.columnHeadingX;
                }
            }
            
            internal DataColumn HeadingYColumn {
                get {
                    return this.columnHeadingY;
                }
            }
            
            internal DataColumn HeadingZColumn {
                get {
                    return this.columnHeadingZ;
                }
            }
            
            internal DataColumn ItemIDColumn {
                get {
                    return this.columnItemID;
                }
            }
            
            public JunkRow this[int index] {
                get {
                    return ((JunkRow)(this.Rows[index]));
                }
            }
            
            public event JunkRowChangeEventHandler JunkRowChanged;
            
            public event JunkRowChangeEventHandler JunkRowChanging;
            
            public event JunkRowChangeEventHandler JunkRowDeleted;
            
            public event JunkRowChangeEventHandler JunkRowDeleting;
            
            public void AddJunkRow(JunkRow row) {
                this.Rows.Add(row);
            }
            
            public JunkRow AddJunkRow(AreaRow parentAreaRowByAreaJunk, string PhysicalObjectName, int ModelID, int SpawnID, int Y, int X, int Z, int HeadingX, int HeadingY, int HeadingZ, int ItemID) {
                JunkRow rowJunkRow = ((JunkRow)(this.NewRow()));
                rowJunkRow.ItemArray = new object[] {
                        parentAreaRowByAreaJunk[0],
                        PhysicalObjectName,
                        ModelID,
                        SpawnID,
                        Y,
                        X,
                        Z,
                        HeadingX,
                        HeadingY,
                        HeadingZ,
                        ItemID};
                this.Rows.Add(rowJunkRow);
                return rowJunkRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                JunkDataTable cln = ((JunkDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new JunkDataTable();
            }
            
            internal void InitVars() {
                this.columnAreaID = this.Columns["AreaID"];
                this.columnPhysicalObjectName = this.Columns["PhysicalObjectName"];
                this.columnModelID = this.Columns["ModelID"];
                this.columnSpawnID = this.Columns["SpawnID"];
                this.columnY = this.Columns["Y"];
                this.columnX = this.Columns["X"];
                this.columnZ = this.Columns["Z"];
                this.columnHeadingX = this.Columns["HeadingX"];
                this.columnHeadingY = this.Columns["HeadingY"];
                this.columnHeadingZ = this.Columns["HeadingZ"];
                this.columnItemID = this.Columns["ItemID"];
            }
            
            private void InitClass() {
                this.columnAreaID = new DataColumn("AreaID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAreaID);
                this.columnPhysicalObjectName = new DataColumn("PhysicalObjectName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhysicalObjectName);
                this.columnModelID = new DataColumn("ModelID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModelID);
                this.columnSpawnID = new DataColumn("SpawnID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSpawnID);
                this.columnY = new DataColumn("Y", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnY);
                this.columnX = new DataColumn("X", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnX);
                this.columnZ = new DataColumn("Z", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnZ);
                this.columnHeadingX = new DataColumn("HeadingX", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeadingX);
                this.columnHeadingY = new DataColumn("HeadingY", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeadingY);
                this.columnHeadingZ = new DataColumn("HeadingZ", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeadingZ);
                this.columnItemID = new DataColumn("ItemID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnItemID);
                this.Constraints.Add(new UniqueConstraint("JunkPK", new DataColumn[] {
                                this.columnSpawnID}, false));
                this.columnAreaID.AllowDBNull = false;
                this.columnPhysicalObjectName.AllowDBNull = false;
                this.columnModelID.AllowDBNull = false;
                this.columnSpawnID.AllowDBNull = false;
                this.columnSpawnID.Unique = true;
                this.columnItemID.AllowDBNull = false;
            }
            
            public JunkRow NewJunkRow() {
                return ((JunkRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new JunkRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(JunkRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.JunkRowChanged != null)) {
                    this.JunkRowChanged(this, new JunkRowChangeEvent(((JunkRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.JunkRowChanging != null)) {
                    this.JunkRowChanging(this, new JunkRowChangeEvent(((JunkRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.JunkRowDeleted != null)) {
                    this.JunkRowDeleted(this, new JunkRowChangeEvent(((JunkRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.JunkRowDeleting != null)) {
                    this.JunkRowDeleting(this, new JunkRowChangeEvent(((JunkRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveJunkRow(JunkRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class JunkRow : DataRow {
            
            private JunkDataTable tableJunk;
            
            internal JunkRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableJunk = ((JunkDataTable)(this.Table));
            }
            
            public int AreaID {
                get {
                    return ((int)(this[this.tableJunk.AreaIDColumn]));
                }
                set {
                    this[this.tableJunk.AreaIDColumn] = value;
                }
            }
            
            public string PhysicalObjectName {
                get {
                    return ((string)(this[this.tableJunk.PhysicalObjectNameColumn]));
                }
                set {
                    this[this.tableJunk.PhysicalObjectNameColumn] = value;
                }
            }
            
            public int ModelID {
                get {
                    return ((int)(this[this.tableJunk.ModelIDColumn]));
                }
                set {
                    this[this.tableJunk.ModelIDColumn] = value;
                }
            }
            
            public int SpawnID {
                get {
                    return ((int)(this[this.tableJunk.SpawnIDColumn]));
                }
                set {
                    this[this.tableJunk.SpawnIDColumn] = value;
                }
            }
            
            public int Y {
                get {
                    try {
                        return ((int)(this[this.tableJunk.YColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunk.YColumn] = value;
                }
            }
            
            public int X {
                get {
                    try {
                        return ((int)(this[this.tableJunk.XColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunk.XColumn] = value;
                }
            }
            
            public int Z {
                get {
                    try {
                        return ((int)(this[this.tableJunk.ZColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunk.ZColumn] = value;
                }
            }
            
            public int HeadingX {
                get {
                    try {
                        return ((int)(this[this.tableJunk.HeadingXColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunk.HeadingXColumn] = value;
                }
            }
            
            public int HeadingY {
                get {
                    try {
                        return ((int)(this[this.tableJunk.HeadingYColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunk.HeadingYColumn] = value;
                }
            }
            
            public int HeadingZ {
                get {
                    try {
                        return ((int)(this[this.tableJunk.HeadingZColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunk.HeadingZColumn] = value;
                }
            }
            
            public int ItemID {
                get {
                    return ((int)(this[this.tableJunk.ItemIDColumn]));
                }
                set {
                    this[this.tableJunk.ItemIDColumn] = value;
                }
            }
            
            public AreaRow AreaRow {
                get {
                    return ((AreaRow)(this.GetParentRow(this.Table.ParentRelations["AreaJunk"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AreaJunk"]);
                }
            }
            
            public bool IsYNull() {
                return this.IsNull(this.tableJunk.YColumn);
            }
            
            public void SetYNull() {
                this[this.tableJunk.YColumn] = System.Convert.DBNull;
            }
            
            public bool IsXNull() {
                return this.IsNull(this.tableJunk.XColumn);
            }
            
            public void SetXNull() {
                this[this.tableJunk.XColumn] = System.Convert.DBNull;
            }
            
            public bool IsZNull() {
                return this.IsNull(this.tableJunk.ZColumn);
            }
            
            public void SetZNull() {
                this[this.tableJunk.ZColumn] = System.Convert.DBNull;
            }
            
            public bool IsHeadingXNull() {
                return this.IsNull(this.tableJunk.HeadingXColumn);
            }
            
            public void SetHeadingXNull() {
                this[this.tableJunk.HeadingXColumn] = System.Convert.DBNull;
            }
            
            public bool IsHeadingYNull() {
                return this.IsNull(this.tableJunk.HeadingYColumn);
            }
            
            public void SetHeadingYNull() {
                this[this.tableJunk.HeadingYColumn] = System.Convert.DBNull;
            }
            
            public bool IsHeadingZNull() {
                return this.IsNull(this.tableJunk.HeadingZColumn);
            }
            
            public void SetHeadingZNull() {
                this[this.tableJunk.HeadingZColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class JunkRowChangeEvent : EventArgs {
            
            private JunkRow eventRow;
            
            private DataRowAction eventAction;
            
            public JunkRowChangeEvent(JunkRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public JunkRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TerrainDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAreaID;
            
            private DataColumn columnPhysicalObjectName;
            
            private DataColumn columnModelID;
            
            private DataColumn columnSpawnID;
            
            private DataColumn columnX;
            
            private DataColumn columnY;
            
            private DataColumn columnZ;
            
            private DataColumn columnHeadingX;
            
            private DataColumn columnHeadingY;
            
            private DataColumn columnHeadingZ;
            
            private DataColumn columnTerrainID;
            
            private DataColumn columnTerrainTypeID;
            
            internal TerrainDataTable() : 
                    base("Terrain") {
                this.InitClass();
            }
            
            internal TerrainDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AreaIDColumn {
                get {
                    return this.columnAreaID;
                }
            }
            
            internal DataColumn PhysicalObjectNameColumn {
                get {
                    return this.columnPhysicalObjectName;
                }
            }
            
            internal DataColumn ModelIDColumn {
                get {
                    return this.columnModelID;
                }
            }
            
            internal DataColumn SpawnIDColumn {
                get {
                    return this.columnSpawnID;
                }
            }
            
            internal DataColumn XColumn {
                get {
                    return this.columnX;
                }
            }
            
            internal DataColumn YColumn {
                get {
                    return this.columnY;
                }
            }
            
            internal DataColumn ZColumn {
                get {
                    return this.columnZ;
                }
            }
            
            internal DataColumn HeadingXColumn {
                get {
                    return this.columnHeadingX;
                }
            }
            
            internal DataColumn HeadingYColumn {
                get {
                    return this.columnHeadingY;
                }
            }
            
            internal DataColumn HeadingZColumn {
                get {
                    return this.columnHeadingZ;
                }
            }
            
            internal DataColumn TerrainIDColumn {
                get {
                    return this.columnTerrainID;
                }
            }
            
            internal DataColumn TerrainTypeIDColumn {
                get {
                    return this.columnTerrainTypeID;
                }
            }
            
            public TerrainRow this[int index] {
                get {
                    return ((TerrainRow)(this.Rows[index]));
                }
            }
            
            public event TerrainRowChangeEventHandler TerrainRowChanged;
            
            public event TerrainRowChangeEventHandler TerrainRowChanging;
            
            public event TerrainRowChangeEventHandler TerrainRowDeleted;
            
            public event TerrainRowChangeEventHandler TerrainRowDeleting;
            
            public void AddTerrainRow(TerrainRow row) {
                this.Rows.Add(row);
            }
            
            public TerrainRow AddTerrainRow(AreaRow parentAreaRowByAreaTerrain, string PhysicalObjectName, int ModelID, int SpawnID, int X, int Y, int Z, int HeadingX, int HeadingY, int HeadingZ, int TerrainID, int TerrainTypeID) {
                TerrainRow rowTerrainRow = ((TerrainRow)(this.NewRow()));
                rowTerrainRow.ItemArray = new object[] {
                        parentAreaRowByAreaTerrain[0],
                        PhysicalObjectName,
                        ModelID,
                        SpawnID,
                        X,
                        Y,
                        Z,
                        HeadingX,
                        HeadingY,
                        HeadingZ,
                        TerrainID,
                        TerrainTypeID};
                this.Rows.Add(rowTerrainRow);
                return rowTerrainRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TerrainDataTable cln = ((TerrainDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TerrainDataTable();
            }
            
            internal void InitVars() {
                this.columnAreaID = this.Columns["AreaID"];
                this.columnPhysicalObjectName = this.Columns["PhysicalObjectName"];
                this.columnModelID = this.Columns["ModelID"];
                this.columnSpawnID = this.Columns["SpawnID"];
                this.columnX = this.Columns["X"];
                this.columnY = this.Columns["Y"];
                this.columnZ = this.Columns["Z"];
                this.columnHeadingX = this.Columns["HeadingX"];
                this.columnHeadingY = this.Columns["HeadingY"];
                this.columnHeadingZ = this.Columns["HeadingZ"];
                this.columnTerrainID = this.Columns["TerrainID"];
                this.columnTerrainTypeID = this.Columns["TerrainTypeID"];
            }
            
            private void InitClass() {
                this.columnAreaID = new DataColumn("AreaID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAreaID);
                this.columnPhysicalObjectName = new DataColumn("PhysicalObjectName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhysicalObjectName);
                this.columnModelID = new DataColumn("ModelID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModelID);
                this.columnSpawnID = new DataColumn("SpawnID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSpawnID);
                this.columnX = new DataColumn("X", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnX);
                this.columnY = new DataColumn("Y", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnY);
                this.columnZ = new DataColumn("Z", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnZ);
                this.columnHeadingX = new DataColumn("HeadingX", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeadingX);
                this.columnHeadingY = new DataColumn("HeadingY", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeadingY);
                this.columnHeadingZ = new DataColumn("HeadingZ", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeadingZ);
                this.columnTerrainID = new DataColumn("TerrainID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerrainID);
                this.columnTerrainTypeID = new DataColumn("TerrainTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerrainTypeID);
                this.Constraints.Add(new UniqueConstraint("TerrainPK", new DataColumn[] {
                                this.columnSpawnID}, false));
                this.columnAreaID.AllowDBNull = false;
                this.columnPhysicalObjectName.AllowDBNull = false;
                this.columnModelID.AllowDBNull = false;
                this.columnSpawnID.AllowDBNull = false;
                this.columnSpawnID.Unique = true;
                this.columnTerrainID.AllowDBNull = false;
                this.columnTerrainTypeID.AllowDBNull = false;
            }
            
            public TerrainRow NewTerrainRow() {
                return ((TerrainRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TerrainRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TerrainRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TerrainRowChanged != null)) {
                    this.TerrainRowChanged(this, new TerrainRowChangeEvent(((TerrainRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TerrainRowChanging != null)) {
                    this.TerrainRowChanging(this, new TerrainRowChangeEvent(((TerrainRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TerrainRowDeleted != null)) {
                    this.TerrainRowDeleted(this, new TerrainRowChangeEvent(((TerrainRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TerrainRowDeleting != null)) {
                    this.TerrainRowDeleting(this, new TerrainRowChangeEvent(((TerrainRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTerrainRow(TerrainRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TerrainRow : DataRow {
            
            private TerrainDataTable tableTerrain;
            
            internal TerrainRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTerrain = ((TerrainDataTable)(this.Table));
            }
            
            public int AreaID {
                get {
                    return ((int)(this[this.tableTerrain.AreaIDColumn]));
                }
                set {
                    this[this.tableTerrain.AreaIDColumn] = value;
                }
            }
            
            public string PhysicalObjectName {
                get {
                    return ((string)(this[this.tableTerrain.PhysicalObjectNameColumn]));
                }
                set {
                    this[this.tableTerrain.PhysicalObjectNameColumn] = value;
                }
            }
            
            public int ModelID {
                get {
                    return ((int)(this[this.tableTerrain.ModelIDColumn]));
                }
                set {
                    this[this.tableTerrain.ModelIDColumn] = value;
                }
            }
            
            public int SpawnID {
                get {
                    return ((int)(this[this.tableTerrain.SpawnIDColumn]));
                }
                set {
                    this[this.tableTerrain.SpawnIDColumn] = value;
                }
            }
            
            public int X {
                get {
                    try {
                        return ((int)(this[this.tableTerrain.XColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerrain.XColumn] = value;
                }
            }
            
            public int Y {
                get {
                    try {
                        return ((int)(this[this.tableTerrain.YColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerrain.YColumn] = value;
                }
            }
            
            public int Z {
                get {
                    try {
                        return ((int)(this[this.tableTerrain.ZColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerrain.ZColumn] = value;
                }
            }
            
            public int HeadingX {
                get {
                    try {
                        return ((int)(this[this.tableTerrain.HeadingXColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerrain.HeadingXColumn] = value;
                }
            }
            
            public int HeadingY {
                get {
                    try {
                        return ((int)(this[this.tableTerrain.HeadingYColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerrain.HeadingYColumn] = value;
                }
            }
            
            public int HeadingZ {
                get {
                    try {
                        return ((int)(this[this.tableTerrain.HeadingZColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerrain.HeadingZColumn] = value;
                }
            }
            
            public int TerrainID {
                get {
                    return ((int)(this[this.tableTerrain.TerrainIDColumn]));
                }
                set {
                    this[this.tableTerrain.TerrainIDColumn] = value;
                }
            }
            
            public int TerrainTypeID {
                get {
                    return ((int)(this[this.tableTerrain.TerrainTypeIDColumn]));
                }
                set {
                    this[this.tableTerrain.TerrainTypeIDColumn] = value;
                }
            }
            
            public AreaRow AreaRow {
                get {
                    return ((AreaRow)(this.GetParentRow(this.Table.ParentRelations["AreaTerrain"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AreaTerrain"]);
                }
            }
            
            public bool IsXNull() {
                return this.IsNull(this.tableTerrain.XColumn);
            }
            
            public void SetXNull() {
                this[this.tableTerrain.XColumn] = System.Convert.DBNull;
            }
            
            public bool IsYNull() {
                return this.IsNull(this.tableTerrain.YColumn);
            }
            
            public void SetYNull() {
                this[this.tableTerrain.YColumn] = System.Convert.DBNull;
            }
            
            public bool IsZNull() {
                return this.IsNull(this.tableTerrain.ZColumn);
            }
            
            public void SetZNull() {
                this[this.tableTerrain.ZColumn] = System.Convert.DBNull;
            }
            
            public bool IsHeadingXNull() {
                return this.IsNull(this.tableTerrain.HeadingXColumn);
            }
            
            public void SetHeadingXNull() {
                this[this.tableTerrain.HeadingXColumn] = System.Convert.DBNull;
            }
            
            public bool IsHeadingYNull() {
                return this.IsNull(this.tableTerrain.HeadingYColumn);
            }
            
            public void SetHeadingYNull() {
                this[this.tableTerrain.HeadingYColumn] = System.Convert.DBNull;
            }
            
            public bool IsHeadingZNull() {
                return this.IsNull(this.tableTerrain.HeadingZColumn);
            }
            
            public void SetHeadingZNull() {
                this[this.tableTerrain.HeadingZColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TerrainRowChangeEvent : EventArgs {
            
            private TerrainRow eventRow;
            
            private DataRowAction eventAction;
            
            public TerrainRowChangeEvent(TerrainRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TerrainRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WieldableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAreaID;
            
            private DataColumn columnPhysicalObjectName;
            
            private DataColumn columnModelID;
            
            private DataColumn columnValue;
            
            private DataColumn columnWeight;
            
            private DataColumn columnItemID;
            
            private DataColumn columnDamage;
            
            private DataColumn columnHitroll;
            
            private DataColumn columnDamageTypeID;
            
            private DataColumn columnSpawnID;
            
            private DataColumn columnX;
            
            private DataColumn columnY;
            
            private DataColumn columnZ;
            
            private DataColumn columnHeadingX;
            
            private DataColumn columnHeadingY;
            
            private DataColumn columnHeadingZ;
            
            internal WieldableDataTable() : 
                    base("Wieldable") {
                this.InitClass();
            }
            
            internal WieldableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AreaIDColumn {
                get {
                    return this.columnAreaID;
                }
            }
            
            internal DataColumn PhysicalObjectNameColumn {
                get {
                    return this.columnPhysicalObjectName;
                }
            }
            
            internal DataColumn ModelIDColumn {
                get {
                    return this.columnModelID;
                }
            }
            
            internal DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            internal DataColumn WeightColumn {
                get {
                    return this.columnWeight;
                }
            }
            
            internal DataColumn ItemIDColumn {
                get {
                    return this.columnItemID;
                }
            }
            
            internal DataColumn DamageColumn {
                get {
                    return this.columnDamage;
                }
            }
            
            internal DataColumn HitrollColumn {
                get {
                    return this.columnHitroll;
                }
            }
            
            internal DataColumn DamageTypeIDColumn {
                get {
                    return this.columnDamageTypeID;
                }
            }
            
            internal DataColumn SpawnIDColumn {
                get {
                    return this.columnSpawnID;
                }
            }
            
            internal DataColumn XColumn {
                get {
                    return this.columnX;
                }
            }
            
            internal DataColumn YColumn {
                get {
                    return this.columnY;
                }
            }
            
            internal DataColumn ZColumn {
                get {
                    return this.columnZ;
                }
            }
            
            internal DataColumn HeadingXColumn {
                get {
                    return this.columnHeadingX;
                }
            }
            
            internal DataColumn HeadingYColumn {
                get {
                    return this.columnHeadingY;
                }
            }
            
            internal DataColumn HeadingZColumn {
                get {
                    return this.columnHeadingZ;
                }
            }
            
            public WieldableRow this[int index] {
                get {
                    return ((WieldableRow)(this.Rows[index]));
                }
            }
            
            public event WieldableRowChangeEventHandler WieldableRowChanged;
            
            public event WieldableRowChangeEventHandler WieldableRowChanging;
            
            public event WieldableRowChangeEventHandler WieldableRowDeleted;
            
            public event WieldableRowChangeEventHandler WieldableRowDeleting;
            
            public void AddWieldableRow(WieldableRow row) {
                this.Rows.Add(row);
            }
            
            public WieldableRow AddWieldableRow(
                        AreaRow parentAreaRowByAreaWieldable, 
                        string PhysicalObjectName, 
                        int ModelID, 
                        int Value, 
                        int Weight, 
                        int ItemID, 
                        int Damage, 
                        int Hitroll, 
                        int DamageTypeID, 
                        int SpawnID, 
                        int X, 
                        int Y, 
                        int Z, 
                        int HeadingX, 
                        int HeadingY, 
                        int HeadingZ) {
                WieldableRow rowWieldableRow = ((WieldableRow)(this.NewRow()));
                rowWieldableRow.ItemArray = new object[] {
                        parentAreaRowByAreaWieldable[0],
                        PhysicalObjectName,
                        ModelID,
                        Value,
                        Weight,
                        ItemID,
                        Damage,
                        Hitroll,
                        DamageTypeID,
                        SpawnID,
                        X,
                        Y,
                        Z,
                        HeadingX,
                        HeadingY,
                        HeadingZ};
                this.Rows.Add(rowWieldableRow);
                return rowWieldableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                WieldableDataTable cln = ((WieldableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new WieldableDataTable();
            }
            
            internal void InitVars() {
                this.columnAreaID = this.Columns["AreaID"];
                this.columnPhysicalObjectName = this.Columns["PhysicalObjectName"];
                this.columnModelID = this.Columns["ModelID"];
                this.columnValue = this.Columns["Value"];
                this.columnWeight = this.Columns["Weight"];
                this.columnItemID = this.Columns["ItemID"];
                this.columnDamage = this.Columns["Damage"];
                this.columnHitroll = this.Columns["Hitroll"];
                this.columnDamageTypeID = this.Columns["DamageTypeID"];
                this.columnSpawnID = this.Columns["SpawnID"];
                this.columnX = this.Columns["X"];
                this.columnY = this.Columns["Y"];
                this.columnZ = this.Columns["Z"];
                this.columnHeadingX = this.Columns["HeadingX"];
                this.columnHeadingY = this.Columns["HeadingY"];
                this.columnHeadingZ = this.Columns["HeadingZ"];
            }
            
            private void InitClass() {
                this.columnAreaID = new DataColumn("AreaID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAreaID);
                this.columnPhysicalObjectName = new DataColumn("PhysicalObjectName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhysicalObjectName);
                this.columnModelID = new DataColumn("ModelID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModelID);
                this.columnValue = new DataColumn("Value", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnValue);
                this.columnWeight = new DataColumn("Weight", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWeight);
                this.columnItemID = new DataColumn("ItemID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnItemID);
                this.columnDamage = new DataColumn("Damage", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDamage);
                this.columnHitroll = new DataColumn("Hitroll", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHitroll);
                this.columnDamageTypeID = new DataColumn("DamageTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDamageTypeID);
                this.columnSpawnID = new DataColumn("SpawnID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSpawnID);
                this.columnX = new DataColumn("X", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnX);
                this.columnY = new DataColumn("Y", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnY);
                this.columnZ = new DataColumn("Z", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnZ);
                this.columnHeadingX = new DataColumn("HeadingX", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeadingX);
                this.columnHeadingY = new DataColumn("HeadingY", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeadingY);
                this.columnHeadingZ = new DataColumn("HeadingZ", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeadingZ);
                this.Constraints.Add(new UniqueConstraint("WieldablePK", new DataColumn[] {
                                this.columnSpawnID}, false));
                this.columnAreaID.AllowDBNull = false;
                this.columnPhysicalObjectName.AllowDBNull = false;
                this.columnModelID.AllowDBNull = false;
                this.columnValue.AllowDBNull = false;
                this.columnWeight.AllowDBNull = false;
                this.columnItemID.AllowDBNull = false;
                this.columnDamage.AllowDBNull = false;
                this.columnHitroll.AllowDBNull = false;
                this.columnDamageTypeID.AllowDBNull = false;
                this.columnSpawnID.AllowDBNull = false;
                this.columnSpawnID.Unique = true;
            }
            
            public WieldableRow NewWieldableRow() {
                return ((WieldableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new WieldableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(WieldableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WieldableRowChanged != null)) {
                    this.WieldableRowChanged(this, new WieldableRowChangeEvent(((WieldableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WieldableRowChanging != null)) {
                    this.WieldableRowChanging(this, new WieldableRowChangeEvent(((WieldableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WieldableRowDeleted != null)) {
                    this.WieldableRowDeleted(this, new WieldableRowChangeEvent(((WieldableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WieldableRowDeleting != null)) {
                    this.WieldableRowDeleting(this, new WieldableRowChangeEvent(((WieldableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveWieldableRow(WieldableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WieldableRow : DataRow {
            
            private WieldableDataTable tableWieldable;
            
            internal WieldableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableWieldable = ((WieldableDataTable)(this.Table));
            }
            
            public int AreaID {
                get {
                    return ((int)(this[this.tableWieldable.AreaIDColumn]));
                }
                set {
                    this[this.tableWieldable.AreaIDColumn] = value;
                }
            }
            
            public string PhysicalObjectName {
                get {
                    return ((string)(this[this.tableWieldable.PhysicalObjectNameColumn]));
                }
                set {
                    this[this.tableWieldable.PhysicalObjectNameColumn] = value;
                }
            }
            
            public int ModelID {
                get {
                    return ((int)(this[this.tableWieldable.ModelIDColumn]));
                }
                set {
                    this[this.tableWieldable.ModelIDColumn] = value;
                }
            }
            
            public int Value {
                get {
                    return ((int)(this[this.tableWieldable.ValueColumn]));
                }
                set {
                    this[this.tableWieldable.ValueColumn] = value;
                }
            }
            
            public int Weight {
                get {
                    return ((int)(this[this.tableWieldable.WeightColumn]));
                }
                set {
                    this[this.tableWieldable.WeightColumn] = value;
                }
            }
            
            public int ItemID {
                get {
                    return ((int)(this[this.tableWieldable.ItemIDColumn]));
                }
                set {
                    this[this.tableWieldable.ItemIDColumn] = value;
                }
            }
            
            public int Damage {
                get {
                    return ((int)(this[this.tableWieldable.DamageColumn]));
                }
                set {
                    this[this.tableWieldable.DamageColumn] = value;
                }
            }
            
            public int Hitroll {
                get {
                    return ((int)(this[this.tableWieldable.HitrollColumn]));
                }
                set {
                    this[this.tableWieldable.HitrollColumn] = value;
                }
            }
            
            public int DamageTypeID {
                get {
                    return ((int)(this[this.tableWieldable.DamageTypeIDColumn]));
                }
                set {
                    this[this.tableWieldable.DamageTypeIDColumn] = value;
                }
            }
            
            public int SpawnID {
                get {
                    return ((int)(this[this.tableWieldable.SpawnIDColumn]));
                }
                set {
                    this[this.tableWieldable.SpawnIDColumn] = value;
                }
            }
            
            public int X {
                get {
                    try {
                        return ((int)(this[this.tableWieldable.XColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWieldable.XColumn] = value;
                }
            }
            
            public int Y {
                get {
                    try {
                        return ((int)(this[this.tableWieldable.YColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWieldable.YColumn] = value;
                }
            }
            
            public int Z {
                get {
                    try {
                        return ((int)(this[this.tableWieldable.ZColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWieldable.ZColumn] = value;
                }
            }
            
            public int HeadingX {
                get {
                    try {
                        return ((int)(this[this.tableWieldable.HeadingXColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWieldable.HeadingXColumn] = value;
                }
            }
            
            public int HeadingY {
                get {
                    try {
                        return ((int)(this[this.tableWieldable.HeadingYColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWieldable.HeadingYColumn] = value;
                }
            }
            
            public int HeadingZ {
                get {
                    try {
                        return ((int)(this[this.tableWieldable.HeadingZColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWieldable.HeadingZColumn] = value;
                }
            }
            
            public AreaRow AreaRow {
                get {
                    return ((AreaRow)(this.GetParentRow(this.Table.ParentRelations["AreaWieldable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AreaWieldable"]);
                }
            }
            
            public bool IsXNull() {
                return this.IsNull(this.tableWieldable.XColumn);
            }
            
            public void SetXNull() {
                this[this.tableWieldable.XColumn] = System.Convert.DBNull;
            }
            
            public bool IsYNull() {
                return this.IsNull(this.tableWieldable.YColumn);
            }
            
            public void SetYNull() {
                this[this.tableWieldable.YColumn] = System.Convert.DBNull;
            }
            
            public bool IsZNull() {
                return this.IsNull(this.tableWieldable.ZColumn);
            }
            
            public void SetZNull() {
                this[this.tableWieldable.ZColumn] = System.Convert.DBNull;
            }
            
            public bool IsHeadingXNull() {
                return this.IsNull(this.tableWieldable.HeadingXColumn);
            }
            
            public void SetHeadingXNull() {
                this[this.tableWieldable.HeadingXColumn] = System.Convert.DBNull;
            }
            
            public bool IsHeadingYNull() {
                return this.IsNull(this.tableWieldable.HeadingYColumn);
            }
            
            public void SetHeadingYNull() {
                this[this.tableWieldable.HeadingYColumn] = System.Convert.DBNull;
            }
            
            public bool IsHeadingZNull() {
                return this.IsNull(this.tableWieldable.HeadingZColumn);
            }
            
            public void SetHeadingZNull() {
                this[this.tableWieldable.HeadingZColumn] = System.Convert.DBNull;
            }
            
            public InventoryRow[] GetInventoryRows() {
                return ((InventoryRow[])(this.GetChildRows(this.Table.ChildRelations["WieldableInventory"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WieldableRowChangeEvent : EventArgs {
            
            private WieldableRow eventRow;
            
            private DataRowAction eventAction;
            
            public WieldableRowChangeEvent(WieldableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public WieldableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MobilePossesableByPlayerDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnMobileID;
            
            private DataColumn columnPlayerID;
            
            private DataColumn columnSpawnID;
            
            internal MobilePossesableByPlayerDataTable() : 
                    base("MobilePossesableByPlayer") {
                this.InitClass();
            }
            
            internal MobilePossesableByPlayerDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn MobileIDColumn {
                get {
                    return this.columnMobileID;
                }
            }
            
            internal DataColumn PlayerIDColumn {
                get {
                    return this.columnPlayerID;
                }
            }
            
            internal DataColumn SpawnIDColumn {
                get {
                    return this.columnSpawnID;
                }
            }
            
            public MobilePossesableByPlayerRow this[int index] {
                get {
                    return ((MobilePossesableByPlayerRow)(this.Rows[index]));
                }
            }
            
            public event MobilePossesableByPlayerRowChangeEventHandler MobilePossesableByPlayerRowChanged;
            
            public event MobilePossesableByPlayerRowChangeEventHandler MobilePossesableByPlayerRowChanging;
            
            public event MobilePossesableByPlayerRowChangeEventHandler MobilePossesableByPlayerRowDeleted;
            
            public event MobilePossesableByPlayerRowChangeEventHandler MobilePossesableByPlayerRowDeleting;
            
            public void AddMobilePossesableByPlayerRow(MobilePossesableByPlayerRow row) {
                this.Rows.Add(row);
            }
            
            public MobilePossesableByPlayerRow AddMobilePossesableByPlayerRow(int MobileID, PlayerRow parentPlayerRowByPlayerMobilePossesableByPlayer, MobileRow parentMobileRowByMobileMobilePossesableByPlayer) {
                MobilePossesableByPlayerRow rowMobilePossesableByPlayerRow = ((MobilePossesableByPlayerRow)(this.NewRow()));
                rowMobilePossesableByPlayerRow.ItemArray = new object[] {
                        MobileID,
                        parentPlayerRowByPlayerMobilePossesableByPlayer[0],
                        parentMobileRowByMobileMobilePossesableByPlayer[9]};
                this.Rows.Add(rowMobilePossesableByPlayerRow);
                return rowMobilePossesableByPlayerRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MobilePossesableByPlayerDataTable cln = ((MobilePossesableByPlayerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MobilePossesableByPlayerDataTable();
            }
            
            internal void InitVars() {
                this.columnMobileID = this.Columns["MobileID"];
                this.columnPlayerID = this.Columns["PlayerID"];
                this.columnSpawnID = this.Columns["SpawnID"];
            }
            
            private void InitClass() {
                this.columnMobileID = new DataColumn("MobileID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMobileID);
                this.columnPlayerID = new DataColumn("PlayerID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPlayerID);
                this.columnSpawnID = new DataColumn("SpawnID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSpawnID);
                this.columnMobileID.AllowDBNull = false;
                this.columnPlayerID.AllowDBNull = false;
            }
            
            public MobilePossesableByPlayerRow NewMobilePossesableByPlayerRow() {
                return ((MobilePossesableByPlayerRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MobilePossesableByPlayerRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MobilePossesableByPlayerRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MobilePossesableByPlayerRowChanged != null)) {
                    this.MobilePossesableByPlayerRowChanged(this, new MobilePossesableByPlayerRowChangeEvent(((MobilePossesableByPlayerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MobilePossesableByPlayerRowChanging != null)) {
                    this.MobilePossesableByPlayerRowChanging(this, new MobilePossesableByPlayerRowChangeEvent(((MobilePossesableByPlayerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MobilePossesableByPlayerRowDeleted != null)) {
                    this.MobilePossesableByPlayerRowDeleted(this, new MobilePossesableByPlayerRowChangeEvent(((MobilePossesableByPlayerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MobilePossesableByPlayerRowDeleting != null)) {
                    this.MobilePossesableByPlayerRowDeleting(this, new MobilePossesableByPlayerRowChangeEvent(((MobilePossesableByPlayerRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMobilePossesableByPlayerRow(MobilePossesableByPlayerRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MobilePossesableByPlayerRow : DataRow {
            
            private MobilePossesableByPlayerDataTable tableMobilePossesableByPlayer;
            
            internal MobilePossesableByPlayerRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMobilePossesableByPlayer = ((MobilePossesableByPlayerDataTable)(this.Table));
            }
            
            public int MobileID {
                get {
                    return ((int)(this[this.tableMobilePossesableByPlayer.MobileIDColumn]));
                }
                set {
                    this[this.tableMobilePossesableByPlayer.MobileIDColumn] = value;
                }
            }
            
            public int PlayerID {
                get {
                    return ((int)(this[this.tableMobilePossesableByPlayer.PlayerIDColumn]));
                }
                set {
                    this[this.tableMobilePossesableByPlayer.PlayerIDColumn] = value;
                }
            }
            
            public int SpawnID {
                get {
                    try {
                        return ((int)(this[this.tableMobilePossesableByPlayer.SpawnIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMobilePossesableByPlayer.SpawnIDColumn] = value;
                }
            }
            
            public PlayerRow PlayerRow {
                get {
                    return ((PlayerRow)(this.GetParentRow(this.Table.ParentRelations["PlayerMobilePossesableByPlayer"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PlayerMobilePossesableByPlayer"]);
                }
            }
            
            public MobileRow MobileRow {
                get {
                    return ((MobileRow)(this.GetParentRow(this.Table.ParentRelations["MobileMobilePossesableByPlayer"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MobileMobilePossesableByPlayer"]);
                }
            }
            
            public bool IsSpawnIDNull() {
                return this.IsNull(this.tableMobilePossesableByPlayer.SpawnIDColumn);
            }
            
            public void SetSpawnIDNull() {
                this[this.tableMobilePossesableByPlayer.SpawnIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MobilePossesableByPlayerRowChangeEvent : EventArgs {
            
            private MobilePossesableByPlayerRow eventRow;
            
            private DataRowAction eventAction;
            
            public MobilePossesableByPlayerRowChangeEvent(MobilePossesableByPlayerRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MobilePossesableByPlayerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InventoryDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPhysicalObjectID;
            
            private DataColumn columnItemID;
            
            private DataColumn columnSpawnID;
            
            internal InventoryDataTable() : 
                    base("Inventory") {
                this.InitClass();
            }
            
            internal InventoryDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PhysicalObjectIDColumn {
                get {
                    return this.columnPhysicalObjectID;
                }
            }
            
            internal DataColumn ItemIDColumn {
                get {
                    return this.columnItemID;
                }
            }
            
            internal DataColumn SpawnIDColumn {
                get {
                    return this.columnSpawnID;
                }
            }
            
            public InventoryRow this[int index] {
                get {
                    return ((InventoryRow)(this.Rows[index]));
                }
            }
            
            public event InventoryRowChangeEventHandler InventoryRowChanged;
            
            public event InventoryRowChangeEventHandler InventoryRowChanging;
            
            public event InventoryRowChangeEventHandler InventoryRowDeleted;
            
            public event InventoryRowChangeEventHandler InventoryRowDeleting;
            
            public void AddInventoryRow(InventoryRow row) {
                this.Rows.Add(row);
            }
            
            public InventoryRow AddInventoryRow(int PhysicalObjectID, int ItemID, MobileRow parentMobileRowByMobileInventory) {
                InventoryRow rowInventoryRow = ((InventoryRow)(this.NewRow()));
                rowInventoryRow.ItemArray = new object[] {
                        PhysicalObjectID,
                        ItemID,
                        parentMobileRowByMobileInventory[9]};
                this.Rows.Add(rowInventoryRow);
                return rowInventoryRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                InventoryDataTable cln = ((InventoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new InventoryDataTable();
            }
            
            internal void InitVars() {
                this.columnPhysicalObjectID = this.Columns["PhysicalObjectID"];
                this.columnItemID = this.Columns["ItemID"];
                this.columnSpawnID = this.Columns["SpawnID"];
            }
            
            private void InitClass() {
                this.columnPhysicalObjectID = new DataColumn("PhysicalObjectID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhysicalObjectID);
                this.columnItemID = new DataColumn("ItemID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnItemID);
                this.columnSpawnID = new DataColumn("SpawnID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSpawnID);
                this.columnPhysicalObjectID.AllowDBNull = false;
                this.columnItemID.AllowDBNull = false;
            }
            
            public InventoryRow NewInventoryRow() {
                return ((InventoryRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new InventoryRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(InventoryRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InventoryRowChanged != null)) {
                    this.InventoryRowChanged(this, new InventoryRowChangeEvent(((InventoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InventoryRowChanging != null)) {
                    this.InventoryRowChanging(this, new InventoryRowChangeEvent(((InventoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InventoryRowDeleted != null)) {
                    this.InventoryRowDeleted(this, new InventoryRowChangeEvent(((InventoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InventoryRowDeleting != null)) {
                    this.InventoryRowDeleting(this, new InventoryRowChangeEvent(((InventoryRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveInventoryRow(InventoryRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InventoryRow : DataRow {
            
            private InventoryDataTable tableInventory;
            
            internal InventoryRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableInventory = ((InventoryDataTable)(this.Table));
            }
            
            public int PhysicalObjectID {
                get {
                    return ((int)(this[this.tableInventory.PhysicalObjectIDColumn]));
                }
                set {
                    this[this.tableInventory.PhysicalObjectIDColumn] = value;
                }
            }
            
            public int ItemID {
                get {
                    return ((int)(this[this.tableInventory.ItemIDColumn]));
                }
                set {
                    this[this.tableInventory.ItemIDColumn] = value;
                }
            }
            
            public int SpawnID {
                get {
                    try {
                        return ((int)(this[this.tableInventory.SpawnIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInventory.SpawnIDColumn] = value;
                }
            }
            
            public MobileRow MobileRow {
                get {
                    return ((MobileRow)(this.GetParentRow(this.Table.ParentRelations["MobileInventory"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MobileInventory"]);
                }
            }
            
            public WieldableRow WieldableRow {
                get {
                    return ((WieldableRow)(this.GetParentRow(this.Table.ParentRelations["WieldableInventory"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["WieldableInventory"]);
                }
            }
            
            public bool IsSpawnIDNull() {
                return this.IsNull(this.tableInventory.SpawnIDColumn);
            }
            
            public void SetSpawnIDNull() {
                this[this.tableInventory.SpawnIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InventoryRowChangeEvent : EventArgs {
            
            private InventoryRow eventRow;
            
            private DataRowAction eventAction;
            
            public InventoryRowChangeEvent(InventoryRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public InventoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

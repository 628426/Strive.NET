//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.209
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Strive.Multiverse.Schema {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class Document : DataSet {
        
        private QuaffableItemDataTable tableQuaffableItem;
        
        public Document() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected Document(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["QuaffableItem"] != null)) {
                    this.Tables.Add(new QuaffableItemDataTable(ds.Tables["QuaffableItem"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public QuaffableItemDataTable QuaffableItem {
            get {
                return this.tableQuaffableItem;
            }
        }
        
        public override DataSet Clone() {
            Document cln = ((Document)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["QuaffableItem"] != null)) {
                this.Tables.Add(new QuaffableItemDataTable(ds.Tables["QuaffableItem"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableQuaffableItem = ((QuaffableItemDataTable)(this.Tables["QuaffableItem"]));
            if ((this.tableQuaffableItem != null)) {
                this.tableQuaffableItem.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "Document";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/QuaffableItem.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-AU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableQuaffableItem = new QuaffableItemDataTable();
            this.Tables.Add(this.tableQuaffableItem);
        }
        
        private bool ShouldSerializeQuaffableItem() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void QuaffableItemRowChangeEventHandler(object sender, QuaffableItemRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class QuaffableItemDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnItemID;
            
            private DataColumn columnLiquidTypeID;
            
            private DataColumn columnCapacity;
            
            private DataColumn columnValue;
            
            private DataColumn columnWeight;
            
            private DataColumn columnPhysicalObjectID;
            
            private DataColumn columnModelID;
            
            internal QuaffableItemDataTable() : 
                    base("QuaffableItem") {
                this.InitClass();
            }
            
            internal QuaffableItemDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ItemIDColumn {
                get {
                    return this.columnItemID;
                }
            }
            
            internal DataColumn LiquidTypeIDColumn {
                get {
                    return this.columnLiquidTypeID;
                }
            }
            
            internal DataColumn CapacityColumn {
                get {
                    return this.columnCapacity;
                }
            }
            
            internal DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            internal DataColumn WeightColumn {
                get {
                    return this.columnWeight;
                }
            }
            
            internal DataColumn PhysicalObjectIDColumn {
                get {
                    return this.columnPhysicalObjectID;
                }
            }
            
            internal DataColumn ModelIDColumn {
                get {
                    return this.columnModelID;
                }
            }
            
            public QuaffableItemRow this[int index] {
                get {
                    return ((QuaffableItemRow)(this.Rows[index]));
                }
            }
            
            public event QuaffableItemRowChangeEventHandler QuaffableItemRowChanged;
            
            public event QuaffableItemRowChangeEventHandler QuaffableItemRowChanging;
            
            public event QuaffableItemRowChangeEventHandler QuaffableItemRowDeleted;
            
            public event QuaffableItemRowChangeEventHandler QuaffableItemRowDeleting;
            
            public void AddQuaffableItemRow(QuaffableItemRow row) {
                this.Rows.Add(row);
            }
            
            public QuaffableItemRow AddQuaffableItemRow(int ItemID, int LiquidTypeID, int Capacity, int Value, int Weight, string ModelID) {
                QuaffableItemRow rowQuaffableItemRow = ((QuaffableItemRow)(this.NewRow()));
                rowQuaffableItemRow.ItemArray = new object[] {
                        ItemID,
                        LiquidTypeID,
                        Capacity,
                        Value,
                        Weight,
                        null,
                        ModelID};
                this.Rows.Add(rowQuaffableItemRow);
                return rowQuaffableItemRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                QuaffableItemDataTable cln = ((QuaffableItemDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new QuaffableItemDataTable();
            }
            
            internal void InitVars() {
                this.columnItemID = this.Columns["ItemID"];
                this.columnLiquidTypeID = this.Columns["LiquidTypeID"];
                this.columnCapacity = this.Columns["Capacity"];
                this.columnValue = this.Columns["Value"];
                this.columnWeight = this.Columns["Weight"];
                this.columnPhysicalObjectID = this.Columns["PhysicalObjectID"];
                this.columnModelID = this.Columns["ModelID"];
            }
            
            private void InitClass() {
                this.columnItemID = new DataColumn("ItemID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnItemID);
                this.columnLiquidTypeID = new DataColumn("LiquidTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLiquidTypeID);
                this.columnCapacity = new DataColumn("Capacity", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCapacity);
                this.columnValue = new DataColumn("Value", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnValue);
                this.columnWeight = new DataColumn("Weight", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWeight);
                this.columnPhysicalObjectID = new DataColumn("PhysicalObjectID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhysicalObjectID);
                this.columnModelID = new DataColumn("ModelID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModelID);
                this.Constraints.Add(new UniqueConstraint("QuaffableItemKey", new DataColumn[] {
                                this.columnItemID}, false));
                this.columnItemID.AllowDBNull = false;
                this.columnItemID.Unique = true;
                this.columnValue.AllowDBNull = false;
                this.columnWeight.AllowDBNull = false;
                this.columnPhysicalObjectID.AutoIncrement = true;
                this.columnPhysicalObjectID.AllowDBNull = false;
                this.columnPhysicalObjectID.ReadOnly = true;
                this.columnModelID.AllowDBNull = false;
            }
            
            public QuaffableItemRow NewQuaffableItemRow() {
                return ((QuaffableItemRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new QuaffableItemRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(QuaffableItemRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.QuaffableItemRowChanged != null)) {
                    this.QuaffableItemRowChanged(this, new QuaffableItemRowChangeEvent(((QuaffableItemRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.QuaffableItemRowChanging != null)) {
                    this.QuaffableItemRowChanging(this, new QuaffableItemRowChangeEvent(((QuaffableItemRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.QuaffableItemRowDeleted != null)) {
                    this.QuaffableItemRowDeleted(this, new QuaffableItemRowChangeEvent(((QuaffableItemRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.QuaffableItemRowDeleting != null)) {
                    this.QuaffableItemRowDeleting(this, new QuaffableItemRowChangeEvent(((QuaffableItemRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveQuaffableItemRow(QuaffableItemRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class QuaffableItemRow : DataRow {
            
            private QuaffableItemDataTable tableQuaffableItem;
            
            internal QuaffableItemRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableQuaffableItem = ((QuaffableItemDataTable)(this.Table));
            }
            
            public int ItemID {
                get {
                    return ((int)(this[this.tableQuaffableItem.ItemIDColumn]));
                }
                set {
                    this[this.tableQuaffableItem.ItemIDColumn] = value;
                }
            }
            
            public int LiquidTypeID {
                get {
                    try {
                        return ((int)(this[this.tableQuaffableItem.LiquidTypeIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuaffableItem.LiquidTypeIDColumn] = value;
                }
            }
            
            public int Capacity {
                get {
                    try {
                        return ((int)(this[this.tableQuaffableItem.CapacityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuaffableItem.CapacityColumn] = value;
                }
            }
            
            public int Value {
                get {
                    return ((int)(this[this.tableQuaffableItem.ValueColumn]));
                }
                set {
                    this[this.tableQuaffableItem.ValueColumn] = value;
                }
            }
            
            public int Weight {
                get {
                    return ((int)(this[this.tableQuaffableItem.WeightColumn]));
                }
                set {
                    this[this.tableQuaffableItem.WeightColumn] = value;
                }
            }
            
            public int PhysicalObjectID {
                get {
                    return ((int)(this[this.tableQuaffableItem.PhysicalObjectIDColumn]));
                }
                set {
                    this[this.tableQuaffableItem.PhysicalObjectIDColumn] = value;
                }
            }
            
            public string ModelID {
                get {
                    return ((string)(this[this.tableQuaffableItem.ModelIDColumn]));
                }
                set {
                    this[this.tableQuaffableItem.ModelIDColumn] = value;
                }
            }
            
            public bool IsLiquidTypeIDNull() {
                return this.IsNull(this.tableQuaffableItem.LiquidTypeIDColumn);
            }
            
            public void SetLiquidTypeIDNull() {
                this[this.tableQuaffableItem.LiquidTypeIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCapacityNull() {
                return this.IsNull(this.tableQuaffableItem.CapacityColumn);
            }
            
            public void SetCapacityNull() {
                this[this.tableQuaffableItem.CapacityColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class QuaffableItemRowChangeEvent : EventArgs {
            
            private QuaffableItemRow eventRow;
            
            private DataRowAction eventAction;
            
            public QuaffableItemRowChangeEvent(QuaffableItemRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public QuaffableItemRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
